                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.6 #12539 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mgbz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _ball_movement
                                     13 	.globl _ai_movement
                                     14 	.globl _movement
                                     15 	.globl _init_ball
                                     16 	.globl _init_AI
                                     17 	.globl _init_player
                                     18 	.globl _update_score
                                     19 	.globl _init_min_font
                                     20 	.globl _moveCharacter
                                     21 	.globl _play_jumpy_sound
                                     22 	.globl _sound_init
                                     23 	.globl _initGame
                                     24 	.globl _make_show_win_map
                                     25 	.globl _toString
                                     26 	.globl _strlen
                                     27 	.globl _rand
                                     28 	.globl _initrand
                                     29 	.globl _free
                                     30 	.globl _malloc
                                     31 	.globl _puts
                                     32 	.globl _font_set
                                     33 	.globl _font_load
                                     34 	.globl _font_init
                                     35 	.globl _set_sprite_data
                                     36 	.globl _set_win_tiles
                                     37 	.globl _wait_vbl_done
                                     38 	.globl _waitpad
                                     39 	.globl _joypad
                                     40 	.globl _timer
                                     41 	.globl _canAImove
                                     42 	.globl _yBall
                                     43 	.globl _xBall
                                     44 	.globl _ball_alive
                                     45 	.globl _AICentre
                                     46 	.globl _speed_x
                                     47 	.globl _speed_y
                                     48 	.globl _AI
                                     49 	.globl _player
                                     50 	.globl _ball
                                     51 	.globl _low
                                     52 	.globl _mid
                                     53 	.globl _top
                                     54 	.globl _character
                                     55 ;--------------------------------------------------------
                                     56 ; special function registers
                                     57 ;--------------------------------------------------------
                                     58 ;--------------------------------------------------------
                                     59 ; ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area _DATA
      000000                         62 _player::
      000000                         63 	.ds 14
      00000E                         64 _AI::
      00000E                         65 	.ds 14
      00001C                         66 _speed_y::
      00001C                         67 	.ds 1
      00001D                         68 _speed_x::
      00001D                         69 	.ds 1
      00001E                         70 _AICentre::
      00001E                         71 	.ds 1
      00001F                         72 _ball_alive::
      00001F                         73 	.ds 1
                                     74 ;--------------------------------------------------------
                                     75 ; ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area _INITIALIZED
      000000                         78 _xBall::
      000000                         79 	.ds 2
      000002                         80 _yBall::
      000002                         81 	.ds 2
      000004                         82 _canAImove::
      000004                         83 	.ds 1
      000005                         84 _timer::
      000005                         85 	.ds 1
                                     86 ;--------------------------------------------------------
                                     87 ; absolute external ram data
                                     88 ;--------------------------------------------------------
                                     89 	.area _DABS (ABS)
                                     90 ;--------------------------------------------------------
                                     91 ; global & static initialisations
                                     92 ;--------------------------------------------------------
                                     93 	.area _HOME
                                     94 	.area _GSINIT
                                     95 	.area _GSFINAL
                                     96 	.area _GSINIT
                                     97 ;--------------------------------------------------------
                                     98 ; Home
                                     99 ;--------------------------------------------------------
                                    100 	.area _HOME
                                    101 	.area _HOME
                                    102 ;--------------------------------------------------------
                                    103 ; code
                                    104 ;--------------------------------------------------------
                                    105 	.area _CODE
                                    106 ;utils/tools.c:76: char* toString(uint8 num)
                                    107 ;	---------------------------------
                                    108 ; Function toString
                                    109 ; ---------------------------------
      000000                        110 _toString::
      000000 3B                     111 	dec	sp
                                    112 ;utils/tools.c:81: uint8_t size = number_count_minimal(num);
      000001 F8 03                  113 	ldhl	sp,	#3
      000003 2A                     114 	ld	a, (hl+)
      000004 4F                     115 	ld	c, a
      000005 46                     116 	ld	b, (hl)
      000006 79                     117 	ld	a, c
      000007 D6 0A                  118 	sub	a, #0x0a
      000009 78                     119 	ld	a, b
      00000A DE 00                  120 	sbc	a, #0x00
      00000C 30 04                  121 	jr	NC, 00111$
      00000E 1E 00                  122 	ld	e, #0x00
      000010 18 1A                  123 	jr	00113$
      000012                        124 00111$:
      000012 79                     125 	ld	a, c
      000013 D6 64                  126 	sub	a, #0x64
      000015 78                     127 	ld	a, b
      000016 DE 00                  128 	sbc	a, #0x00
      000018 30 04                  129 	jr	NC, 00109$
      00001A 1E 01                  130 	ld	e, #0x01
      00001C 18 0E                  131 	jr	00113$
      00001E                        132 00109$:
      00001E 79                     133 	ld	a, c
      00001F D6 E8                  134 	sub	a, #0xe8
      000021 78                     135 	ld	a, b
      000022 DE 03                  136 	sbc	a, #0x03
      000024 30 04                  137 	jr	NC, 00107$
      000026 1E 02                  138 	ld	e, #0x02
      000028 18 02                  139 	jr	00113$
      00002A                        140 00107$:
      00002A 1E 03                  141 	ld	e, #0x03
      00002C                        142 00113$:
                                    143 ;utils/tools.c:83: char *a = malloc((size + 1) * sizeof(char));
      00002C 4B                     144 	ld	c, e
      00002D 06 00                  145 	ld	b, #0x00
      00002F 03                     146 	inc	bc
      000030 D5                     147 	push	de
      000031 C5                     148 	push	bc
      000032 CDr00r00               149 	call	_malloc
      000035 E1                     150 	pop	hl
      000036 4B                     151 	ld	c, e
      000037 42                     152 	ld	b, d
      000038 D1                     153 	pop	de
                                    154 ;utils/tools.c:88: uint8_t i = size + 1;
                                    155 ;utils/tools.c:89: a[i --] = '\0';
      000039 1C                     156 	inc	e
      00003A 7B                     157 	ld	a, e
      00003B 3D                     158 	dec	a
      00003C F8 00                  159 	ldhl	sp,	#0
      00003E 77                     160 	ld	(hl), a
      00003F 6B                     161 	ld	l, e
      000040 26 00                  162 	ld	h, #0x00
      000042 09                     163 	add	hl, bc
      000043 36 00                  164 	ld	(hl), #0x00
                                    165 ;utils/tools.c:91: while(num)
      000045                        166 00101$:
      000045 F8 04                  167 	ldhl	sp,	#4
      000047 3A                     168 	ld	a, (hl-)
      000048 B6                     169 	or	a, (hl)
      000049 28 40                  170 	jr	Z, 00103$
                                    171 ;utils/tools.c:93: a[i --] = digits[num%10];
      00004B F8 00                  172 	ldhl	sp,	#0
      00004D 6E                     173 	ld	l, (hl)
      00004E 26 00                  174 	ld	h, #0x00
      000050 09                     175 	add	hl, bc
      000051 5D                     176 	ld	e, l
      000052 54                     177 	ld	d, h
      000053 F8 00                  178 	ldhl	sp,	#0
      000055 35                     179 	dec	(hl)
      000056 C5                     180 	push	bc
      000057 D5                     181 	push	de
      000058 21 0A 00               182 	ld	hl, #0x000a
      00005B E5                     183 	push	hl
      00005C F8 09                  184 	ldhl	sp,	#9
      00005E 2A                     185 	ld	a, (hl+)
      00005F 66                     186 	ld	h, (hl)
                                    187 ;	spillPairReg hl
                                    188 ;	spillPairReg hl
      000060 6F                     189 	ld	l, a
                                    190 ;	spillPairReg hl
                                    191 ;	spillPairReg hl
      000061 E5                     192 	push	hl
      000062 CDr00r00               193 	call	__moduint
      000065 E8 04                  194 	add	sp, #4
      000067 6B                     195 	ld	l, e
                                    196 ;	spillPairReg hl
                                    197 ;	spillPairReg hl
      000068 62                     198 	ld	h, d
                                    199 ;	spillPairReg hl
                                    200 ;	spillPairReg hl
      000069 D1                     201 	pop	de
      00006A C1                     202 	pop	bc
      00006B D5                     203 	push	de
      00006C 11rD7r00               204 	ld	de, #_toString_digits_65536_151
      00006F 19                     205 	add	hl, de
      000070 D1                     206 	pop	de
      000071 7E                     207 	ld	a, (hl)
      000072 12                     208 	ld	(de), a
                                    209 ;utils/tools.c:94: num /=10;
      000073 C5                     210 	push	bc
      000074 11 0A 00               211 	ld	de, #0x000a
      000077 D5                     212 	push	de
      000078 F8 07                  213 	ldhl	sp,	#7
      00007A 2A                     214 	ld	a, (hl+)
      00007B 5F                     215 	ld	e, a
      00007C 56                     216 	ld	d, (hl)
      00007D D5                     217 	push	de
      00007E CDr00r00               218 	call	__divuint
      000081 E8 04                  219 	add	sp, #4
      000083 C1                     220 	pop	bc
      000084 F8 03                  221 	ldhl	sp,	#3
      000086 7B                     222 	ld	a, e
      000087 22                     223 	ld	(hl+), a
      000088 72                     224 	ld	(hl), d
      000089 18 BA                  225 	jr	00101$
      00008B                        226 00103$:
                                    227 ;utils/tools.c:97: return a;
      00008B 59                     228 	ld	e, c
      00008C 50                     229 	ld	d, b
                                    230 ;utils/tools.c:99: }
      00008D 33                     231 	inc	sp
      00008E C9                     232 	ret
      00008F                        233 _character:
      00008F FF                     234 	.db #0xff	; 255
      000090 FF                     235 	.db #0xff	; 255
      000091 FD                     236 	.db #0xfd	; 253
      000092 83                     237 	.db #0x83	; 131
      000093 FD                     238 	.db #0xfd	; 253
      000094 83                     239 	.db #0x83	; 131
      000095 FD                     240 	.db #0xfd	; 253
      000096 83                     241 	.db #0x83	; 131
      000097 FD                     242 	.db #0xfd	; 253
      000098 83                     243 	.db #0x83	; 131
      000099 FD                     244 	.db #0xfd	; 253
      00009A 83                     245 	.db #0x83	; 131
      00009B FD                     246 	.db #0xfd	; 253
      00009C 83                     247 	.db #0x83	; 131
      00009D FD                     248 	.db #0xfd	; 253
      00009E 83                     249 	.db #0x83	; 131
      00009F FD                     250 	.db #0xfd	; 253
      0000A0 83                     251 	.db #0x83	; 131
      0000A1 FD                     252 	.db #0xfd	; 253
      0000A2 83                     253 	.db #0x83	; 131
      0000A3 FD                     254 	.db #0xfd	; 253
      0000A4 83                     255 	.db #0x83	; 131
      0000A5 FD                     256 	.db #0xfd	; 253
      0000A6 83                     257 	.db #0x83	; 131
      0000A7 FD                     258 	.db #0xfd	; 253
      0000A8 83                     259 	.db #0x83	; 131
      0000A9 FD                     260 	.db #0xfd	; 253
      0000AA 83                     261 	.db #0x83	; 131
      0000AB FD                     262 	.db #0xfd	; 253
      0000AC 83                     263 	.db #0x83	; 131
      0000AD FD                     264 	.db #0xfd	; 253
      0000AE 83                     265 	.db #0x83	; 131
      0000AF FD                     266 	.db #0xfd	; 253
      0000B0 83                     267 	.db #0x83	; 131
      0000B1 FD                     268 	.db #0xfd	; 253
      0000B2 83                     269 	.db #0x83	; 131
      0000B3 FD                     270 	.db #0xfd	; 253
      0000B4 83                     271 	.db #0x83	; 131
      0000B5 FD                     272 	.db #0xfd	; 253
      0000B6 83                     273 	.db #0x83	; 131
      0000B7 FD                     274 	.db #0xfd	; 253
      0000B8 83                     275 	.db #0x83	; 131
      0000B9 FD                     276 	.db #0xfd	; 253
      0000BA 83                     277 	.db #0x83	; 131
      0000BB 81                     278 	.db #0x81	; 129
      0000BC FF                     279 	.db #0xff	; 255
      0000BD FF                     280 	.db #0xff	; 255
      0000BE FF                     281 	.db #0xff	; 255
      0000BF 3C                     282 	.db #0x3c	; 60
      0000C0 3C                     283 	.db #0x3c	; 60
      0000C1 7E                     284 	.db #0x7e	; 126
      0000C2 42                     285 	.db #0x42	; 66	'B'
      0000C3 E9                     286 	.db #0xe9	; 233
      0000C4 97                     287 	.db #0x97	; 151
      0000C5 D1                     288 	.db #0xd1	; 209
      0000C6 AF                     289 	.db #0xaf	; 175
      0000C7 E9                     290 	.db #0xe9	; 233
      0000C8 97                     291 	.db #0x97	; 151
      0000C9 D1                     292 	.db #0xd1	; 209
      0000CA AF                     293 	.db #0xaf	; 175
      0000CB 62                     294 	.db #0x62	; 98	'b'
      0000CC 5E                     295 	.db #0x5e	; 94
      0000CD 3C                     296 	.db #0x3c	; 60
      0000CE 3C                     297 	.db #0x3c	; 60
      0000CF                        298 _clear_map:
      0000CF 00                     299 	.db #0x00	; 0
      0000D0 00                     300 	.db #0x00	; 0
      0000D1 00                     301 	.db #0x00	; 0
      0000D2 00                     302 	.db #0x00	; 0
      0000D3 00                     303 	.db #0x00	; 0
      0000D4 00                     304 	.db #0x00	; 0
      0000D5 00                     305 	.db #0x00	; 0
      0000D6 00                     306 	.db #0x00	; 0
      0000D7                        307 _toString_digits_65536_151:
      0000D7 30 31 32 33 34 35 36   308 	.ascii "0123456789"
             37 38 39
      0000E1 00                     309 	.db 0x00
                                    310 ;utils/tools.c:201: void make_show_win_map(int x, int y, int h, char text[])
                                    311 ;	---------------------------------
                                    312 ; Function make_show_win_map
                                    313 ; ---------------------------------
      0000E2                        314 _make_show_win_map::
      0000E2 E8 F8                  315 	add	sp, #-8
                                    316 ;utils/tools.c:204: int w = strlen(text);
      0000E4 F8 10                  317 	ldhl	sp,	#16
      0000E6 2A                     318 	ld	a, (hl+)
      0000E7 5F                     319 	ld	e, a
      0000E8 56                     320 	ld	d, (hl)
      0000E9 D5                     321 	push	de
      0000EA CDr00r00               322 	call	_strlen
      0000ED E8 04                  323 	add	sp, #4
      0000EF D5                     324 	push	de
                                    325 ;utils/tools.c:206: unsigned char* win_map = malloc(sizeof(unsigned char) * w * h);
      0000F0 F8 0E                  326 	ldhl	sp,	#14
      0000F2 2A                     327 	ld	a, (hl+)
      0000F3 5F                     328 	ld	e, a
      0000F4 56                     329 	ld	d, (hl)
      0000F5 D5                     330 	push	de
      0000F6 F8 02                  331 	ldhl	sp,	#2
      0000F8 2A                     332 	ld	a, (hl+)
      0000F9 5F                     333 	ld	e, a
      0000FA 56                     334 	ld	d, (hl)
      0000FB D5                     335 	push	de
      0000FC CDr00r00               336 	call	__mulint
      0000FF E8 04                  337 	add	sp, #4
      000101 F8 02                  338 	ldhl	sp,	#2
      000103 7B                     339 	ld	a, e
      000104 22                     340 	ld	(hl+), a
      000105 72                     341 	ld	(hl), d
      000106 F8 02                  342 	ldhl	sp,	#2
      000108 2A                     343 	ld	a, (hl+)
      000109 5F                     344 	ld	e, a
      00010A 56                     345 	ld	d, (hl)
      00010B D5                     346 	push	de
      00010C CDr00r00               347 	call	_malloc
      00010F E1                     348 	pop	hl
      000110 F8 04                  349 	ldhl	sp,	#4
      000112 7B                     350 	ld	a, e
      000113 22                     351 	ld	(hl+), a
      000114 72                     352 	ld	(hl), d
                                    353 ;utils/tools.c:208: for(int i = 0; i < w * h; ++i)
      000115 01 00 00               354 	ld	bc, #0x0000
      000118                        355 00142$:
      000118 F8 02                  356 	ldhl	sp,	#2
      00011A 79                     357 	ld	a, c
      00011B 96                     358 	sub	a, (hl)
      00011C 23                     359 	inc	hl
      00011D 78                     360 	ld	a, b
      00011E 9E                     361 	sbc	a, (hl)
      00011F 78                     362 	ld	a, b
      000120 57                     363 	ld	d, a
      000121 CB 7E                  364 	bit	7, (hl)
      000123 28 07                  365 	jr	Z, 00167$
      000125 CB 7A                  366 	bit	7, d
      000127 20 08                  367 	jr	NZ, 00168$
      000129 BF                     368 	cp	a, a
      00012A 18 05                  369 	jr	00168$
      00012C                        370 00167$:
      00012C CB 7A                  371 	bit	7, d
      00012E 28 01                  372 	jr	Z, 00168$
      000130 37                     373 	scf
      000131                        374 00168$:
      000131 D2r9Dr02               375 	jp	NC, 00101$
                                    376 ;utils/tools.c:210: win_map[i] = transform_text(text[i]);
      000134 F8 04                  377 	ldhl	sp,	#4
      000136 2A                     378 	ld	a,	(hl+)
      000137 66                     379 	ld	h, (hl)
      000138 6F                     380 	ld	l, a
      000139 09                     381 	add	hl, bc
      00013A E5                     382 	push	hl
      00013B 7D                     383 	ld	a, l
      00013C F8 08                  384 	ldhl	sp,	#8
      00013E 77                     385 	ld	(hl), a
      00013F E1                     386 	pop	hl
      000140 7C                     387 	ld	a, h
      000141 F8 07                  388 	ldhl	sp,	#7
      000143 77                     389 	ld	(hl), a
      000144 F8 10                  390 	ldhl	sp,	#16
      000146 2A                     391 	ld	a,	(hl+)
      000147 66                     392 	ld	h, (hl)
      000148 6F                     393 	ld	l, a
      000149 09                     394 	add	hl, bc
      00014A 5D                     395 	ld	e, l
      00014B 54                     396 	ld	d, h
      00014C 1A                     397 	ld	a, (de)
                                    398 ;	spillPairReg hl
                                    399 ;	spillPairReg hl
                                    400 ;utils/tools.c:104: switch(text)
      00014D 6F                     401 	ld	l, a
      00014E EE 80                  402 	xor	a, #0x80
      000150 D6 B0                  403 	sub	a, #0xb0
      000152 DAr90r02               404 	jp	C, 00138$
      000155 5D                     405 	ld	e, l
      000156 3E 5A                  406 	ld	a,#0x5a
      000158 57                     407 	ld	d,a
      000159 95                     408 	sub	a, l
      00015A CB 7B                  409 	bit	7, e
      00015C 28 07                  410 	jr	Z, 00169$
      00015E CB 7A                  411 	bit	7, d
      000160 20 08                  412 	jr	NZ, 00170$
      000162 BF                     413 	cp	a, a
      000163 18 05                  414 	jr	00170$
      000165                        415 00169$:
      000165 CB 7A                  416 	bit	7, d
      000167 28 01                  417 	jr	Z, 00170$
      000169 37                     418 	scf
      00016A                        419 00170$:
      00016A DAr90r02               420 	jp	C, 00138$
      00016D 7D                     421 	ld	a, l
      00016E C6 D0                  422 	add	a, #0xd0
      000170 5F                     423 	ld	e, a
      000171 16 00                  424 	ld	d, #0x00
      000173 21r7Ar01               425 	ld	hl, #00171$
      000176 19                     426 	add	hl, de
      000177 19                     427 	add	hl, de
      000178 19                     428 	add	hl, de
      000179 E9                     429 	jp	(hl)
      00017A                        430 00171$:
      00017A C3r68r02               431 	jp	00128$
      00017D C3r6Cr02               432 	jp	00129$
      000180 C3r70r02               433 	jp	00130$
      000183 C3r74r02               434 	jp	00131$
      000186 C3r78r02               435 	jp	00132$
      000189 C3r7Cr02               436 	jp	00133$
      00018C C3r80r02               437 	jp	00134$
      00018F C3r84r02               438 	jp	00135$
      000192 C3r88r02               439 	jp	00136$
      000195 C3r8Cr02               440 	jp	00137$
      000198 C3r90r02               441 	jp	00138$
      00019B C3r90r02               442 	jp	00138$
      00019E C3r90r02               443 	jp	00138$
      0001A1 C3r90r02               444 	jp	00138$
      0001A4 C3r90r02               445 	jp	00138$
      0001A7 C3r90r02               446 	jp	00138$
      0001AA C3r90r02               447 	jp	00138$
      0001AD C3rFBr01               448 	jp	00102$
      0001B0 C3r00r02               449 	jp	00103$
      0001B3 C3r05r02               450 	jp	00104$
      0001B6 C3r0Ar02               451 	jp	00105$
      0001B9 C3r0Fr02               452 	jp	00106$
      0001BC C3r14r02               453 	jp	00107$
      0001BF C3r18r02               454 	jp	00108$
      0001C2 C3r1Cr02               455 	jp	00109$
      0001C5 C3r20r02               456 	jp	00110$
      0001C8 C3r24r02               457 	jp	00111$
      0001CB C3r28r02               458 	jp	00112$
      0001CE C3r2Cr02               459 	jp	00113$
      0001D1 C3r30r02               460 	jp	00114$
      0001D4 C3r34r02               461 	jp	00115$
      0001D7 C3r38r02               462 	jp	00116$
      0001DA C3r3Cr02               463 	jp	00117$
      0001DD C3r40r02               464 	jp	00118$
      0001E0 C3r44r02               465 	jp	00119$
      0001E3 C3r48r02               466 	jp	00120$
      0001E6 C3r4Cr02               467 	jp	00121$
      0001E9 C3r50r02               468 	jp	00122$
      0001EC C3r54r02               469 	jp	00123$
      0001EF C3r58r02               470 	jp	00124$
      0001F2 C3r5Cr02               471 	jp	00125$
      0001F5 C3r60r02               472 	jp	00126$
      0001F8 C3r64r02               473 	jp	00127$
                                    474 ;utils/tools.c:106: case 'A':
      0001FB                        475 00102$:
                                    476 ;utils/tools.c:107: return A;
      0001FB 3E 0B                  477 	ld	a, #0x0b
      0001FD C3r91r02               478 	jp	00140$
                                    479 ;utils/tools.c:108: case 'B':
      000200                        480 00103$:
                                    481 ;utils/tools.c:109: return B;
      000200 3E 0C                  482 	ld	a, #0x0c
      000202 C3r91r02               483 	jp	00140$
                                    484 ;utils/tools.c:110: case 'C':
      000205                        485 00104$:
                                    486 ;utils/tools.c:111: return C;
      000205 3E 0D                  487 	ld	a, #0x0d
      000207 C3r91r02               488 	jp	00140$
                                    489 ;utils/tools.c:112: case 'D':
      00020A                        490 00105$:
                                    491 ;utils/tools.c:113: return D;
      00020A 3E 0E                  492 	ld	a, #0x0e
      00020C C3r91r02               493 	jp	00140$
                                    494 ;utils/tools.c:114: case 'E':
      00020F                        495 00106$:
                                    496 ;utils/tools.c:115: return E;
      00020F 3E 0F                  497 	ld	a, #0x0f
      000211 C3r91r02               498 	jp	00140$
                                    499 ;utils/tools.c:116: case 'F':
      000214                        500 00107$:
                                    501 ;utils/tools.c:117: return F;
      000214 3E 10                  502 	ld	a, #0x10
      000216 18 79                  503 	jr	00140$
                                    504 ;utils/tools.c:118: case 'G':
      000218                        505 00108$:
                                    506 ;utils/tools.c:119: return G;
      000218 3E 11                  507 	ld	a, #0x11
      00021A 18 75                  508 	jr	00140$
                                    509 ;utils/tools.c:120: case 'H':
      00021C                        510 00109$:
                                    511 ;utils/tools.c:121: return H;
      00021C 3E 12                  512 	ld	a, #0x12
      00021E 18 71                  513 	jr	00140$
                                    514 ;utils/tools.c:122: case 'I':
      000220                        515 00110$:
                                    516 ;utils/tools.c:123: return I;
      000220 3E 13                  517 	ld	a, #0x13
      000222 18 6D                  518 	jr	00140$
                                    519 ;utils/tools.c:124: case 'J':
      000224                        520 00111$:
                                    521 ;utils/tools.c:125: return J;
      000224 3E 14                  522 	ld	a, #0x14
      000226 18 69                  523 	jr	00140$
                                    524 ;utils/tools.c:126: case 'K':
      000228                        525 00112$:
                                    526 ;utils/tools.c:127: return K;
      000228 3E 15                  527 	ld	a, #0x15
      00022A 18 65                  528 	jr	00140$
                                    529 ;utils/tools.c:128: case 'L':
      00022C                        530 00113$:
                                    531 ;utils/tools.c:129: return L;
      00022C 3E 16                  532 	ld	a, #0x16
      00022E 18 61                  533 	jr	00140$
                                    534 ;utils/tools.c:130: case 'M':
      000230                        535 00114$:
                                    536 ;utils/tools.c:131: return M;
      000230 3E 17                  537 	ld	a, #0x17
      000232 18 5D                  538 	jr	00140$
                                    539 ;utils/tools.c:132: case 'N':
      000234                        540 00115$:
                                    541 ;utils/tools.c:133: return N;
      000234 3E 18                  542 	ld	a, #0x18
      000236 18 59                  543 	jr	00140$
                                    544 ;utils/tools.c:134: case 'O':
      000238                        545 00116$:
                                    546 ;utils/tools.c:135: return O;
      000238 3E 19                  547 	ld	a, #0x19
      00023A 18 55                  548 	jr	00140$
                                    549 ;utils/tools.c:136: case 'P':
      00023C                        550 00117$:
                                    551 ;utils/tools.c:137: return P;
      00023C 3E 1A                  552 	ld	a, #0x1a
      00023E 18 51                  553 	jr	00140$
                                    554 ;utils/tools.c:138: case 'Q':
      000240                        555 00118$:
                                    556 ;utils/tools.c:139: return Q;
      000240 3E 1B                  557 	ld	a, #0x1b
      000242 18 4D                  558 	jr	00140$
                                    559 ;utils/tools.c:140: case 'R':
      000244                        560 00119$:
                                    561 ;utils/tools.c:141: return R;
      000244 3E 1C                  562 	ld	a, #0x1c
      000246 18 49                  563 	jr	00140$
                                    564 ;utils/tools.c:142: case 'S':
      000248                        565 00120$:
                                    566 ;utils/tools.c:143: return S;
      000248 3E 1D                  567 	ld	a, #0x1d
      00024A 18 45                  568 	jr	00140$
                                    569 ;utils/tools.c:144: case 'T':
      00024C                        570 00121$:
                                    571 ;utils/tools.c:145: return T;
      00024C 3E 1E                  572 	ld	a, #0x1e
      00024E 18 41                  573 	jr	00140$
                                    574 ;utils/tools.c:146: case 'U':
      000250                        575 00122$:
                                    576 ;utils/tools.c:147: return U;
      000250 3E 1F                  577 	ld	a, #0x1f
      000252 18 3D                  578 	jr	00140$
                                    579 ;utils/tools.c:148: case 'V':
      000254                        580 00123$:
                                    581 ;utils/tools.c:149: return V;
      000254 3E 20                  582 	ld	a, #0x20
      000256 18 39                  583 	jr	00140$
                                    584 ;utils/tools.c:150: case 'W':
      000258                        585 00124$:
                                    586 ;utils/tools.c:151: return W;
      000258 3E 21                  587 	ld	a, #0x21
      00025A 18 35                  588 	jr	00140$
                                    589 ;utils/tools.c:152: case 'X':
      00025C                        590 00125$:
                                    591 ;utils/tools.c:153: return X;
      00025C 3E 22                  592 	ld	a, #0x22
      00025E 18 31                  593 	jr	00140$
                                    594 ;utils/tools.c:154: case 'Y':
      000260                        595 00126$:
                                    596 ;utils/tools.c:155: return Y;
      000260 3E 23                  597 	ld	a, #0x23
      000262 18 2D                  598 	jr	00140$
                                    599 ;utils/tools.c:156: case 'Z':
      000264                        600 00127$:
                                    601 ;utils/tools.c:157: return Z;
      000264 3E 24                  602 	ld	a, #0x24
      000266 18 29                  603 	jr	00140$
                                    604 ;utils/tools.c:158: case '0':
      000268                        605 00128$:
                                    606 ;utils/tools.c:159: return ZERO;
      000268 3E 01                  607 	ld	a, #0x01
      00026A 18 25                  608 	jr	00140$
                                    609 ;utils/tools.c:160: case '1':
      00026C                        610 00129$:
                                    611 ;utils/tools.c:161: return ONE;
      00026C 3E 02                  612 	ld	a, #0x02
      00026E 18 21                  613 	jr	00140$
                                    614 ;utils/tools.c:162: case '2':
      000270                        615 00130$:
                                    616 ;utils/tools.c:163: return TWO;
      000270 3E 03                  617 	ld	a, #0x03
      000272 18 1D                  618 	jr	00140$
                                    619 ;utils/tools.c:164: case '3':
      000274                        620 00131$:
                                    621 ;utils/tools.c:165: return THREE;
      000274 3E 04                  622 	ld	a, #0x04
      000276 18 19                  623 	jr	00140$
                                    624 ;utils/tools.c:166: case '4':
      000278                        625 00132$:
                                    626 ;utils/tools.c:167: return FOUR;
      000278 3E 05                  627 	ld	a, #0x05
      00027A 18 15                  628 	jr	00140$
                                    629 ;utils/tools.c:168: case '5':
      00027C                        630 00133$:
                                    631 ;utils/tools.c:169: return FIVE;
      00027C 3E 06                  632 	ld	a, #0x06
      00027E 18 11                  633 	jr	00140$
                                    634 ;utils/tools.c:170: case '6':
      000280                        635 00134$:
                                    636 ;utils/tools.c:171: return SIX;
      000280 3E 07                  637 	ld	a, #0x07
      000282 18 0D                  638 	jr	00140$
                                    639 ;utils/tools.c:172: case '7':
      000284                        640 00135$:
                                    641 ;utils/tools.c:173: return SEVEN;
      000284 3E 08                  642 	ld	a, #0x08
      000286 18 09                  643 	jr	00140$
                                    644 ;utils/tools.c:174: case '8':
      000288                        645 00136$:
                                    646 ;utils/tools.c:175: return EIGHT;
      000288 3E 09                  647 	ld	a, #0x09
      00028A 18 05                  648 	jr	00140$
                                    649 ;utils/tools.c:176: case '9':
      00028C                        650 00137$:
                                    651 ;utils/tools.c:177: return NINE;
      00028C 3E 0A                  652 	ld	a, #0x0a
      00028E 18 01                  653 	jr	00140$
                                    654 ;utils/tools.c:178: default:
      000290                        655 00138$:
                                    656 ;utils/tools.c:179: return 0x00;
      000290 AF                     657 	xor	a, a
                                    658 ;utils/tools.c:210: win_map[i] = transform_text(text[i]);
      000291                        659 00140$:
      000291 F8 06                  660 	ldhl	sp,	#6
      000293 F5                     661 	push	af
      000294 2A                     662 	ld	a,	(hl+)
      000295 66                     663 	ld	h, (hl)
      000296 6F                     664 	ld	l, a
      000297 F1                     665 	pop	af
      000298 77                     666 	ld	(hl), a
                                    667 ;utils/tools.c:208: for(int i = 0; i < w * h; ++i)
      000299 03                     668 	inc	bc
      00029A C3r18r01               669 	jp	00142$
      00029D                        670 00101$:
                                    671 ;utils/tools.c:213: set_win_tiles(x, y, w, h, win_map);
      00029D F8 0E                  672 	ldhl	sp,	#14
      00029F 4E                     673 	ld	c, (hl)
      0002A0 F8 00                  674 	ldhl	sp,	#0
      0002A2 46                     675 	ld	b, (hl)
      0002A3 F8 0C                  676 	ldhl	sp,	#12
      0002A5 3A                     677 	ld	a, (hl-)
      0002A6 2B                     678 	dec	hl
      0002A7 5F                     679 	ld	e, a
      0002A8 56                     680 	ld	d, (hl)
      0002A9 F8 04                  681 	ldhl	sp,	#4
      0002AB 2A                     682 	ld	a, (hl+)
      0002AC 66                     683 	ld	h, (hl)
                                    684 ;	spillPairReg hl
                                    685 ;	spillPairReg hl
      0002AD 6F                     686 	ld	l, a
                                    687 ;	spillPairReg hl
                                    688 ;	spillPairReg hl
      0002AE E5                     689 	push	hl
      0002AF 79                     690 	ld	a, c
      0002B0 F5                     691 	push	af
      0002B1 33                     692 	inc	sp
      0002B2 4B                     693 	ld	c, e
      0002B3 C5                     694 	push	bc
      0002B4 D5                     695 	push	de
      0002B5 33                     696 	inc	sp
      0002B6 CDr00r00               697 	call	_set_win_tiles
      0002B9 E8 06                  698 	add	sp, #6
                                    699 ;utils/tools.c:215: free(win_map);
      0002BB F8 04                  700 	ldhl	sp,	#4
      0002BD 2A                     701 	ld	a, (hl+)
      0002BE 4F                     702 	ld	c, a
      0002BF 46                     703 	ld	b, (hl)
      0002C0 C5                     704 	push	bc
      0002C1 CDr00r00               705 	call	_free
      0002C4 E1                     706 	pop	hl
                                    707 ;utils/tools.c:217: }
      0002C5 E8 08                  708 	add	sp, #8
      0002C7 C9                     709 	ret
                                    710 ;utils/tools.c:236: void initGame() {
                                    711 ;	---------------------------------
                                    712 ; Function initGame
                                    713 ; ---------------------------------
      0002C8                        714 _initGame::
                                    715 ;utils/tools.c:244: DISPLAY_ON;
      0002C8 F0r00                  716 	ldh	a, (_LCDC_REG + 0)
      0002CA F6 80                  717 	or	a, #0x80
      0002CC E0r00                  718 	ldh	(_LCDC_REG + 0), a
                                    719 ;utils/tools.c:246: printf("\n\n\n\n\n\n\n      PRESS START!\n");
      0002CE 11rFAr02               720 	ld	de, #___str_2
      0002D1 D5                     721 	push	de
      0002D2 CDr00r00               722 	call	_puts
      0002D5 E1                     723 	pop	hl
                                    724 ;utils/tools.c:247: waitpad(J_START);
      0002D6 3E 80                  725 	ld	a, #0x80
      0002D8 F5                     726 	push	af
      0002D9 33                     727 	inc	sp
      0002DA CDr00r00               728 	call	_waitpad
      0002DD 33                     729 	inc	sp
                                    730 ;utils/tools.c:228: uint16_t seed = LY_REG;
      0002DE F0r00                  731 	ldh	a, (_LY_REG + 0)
      0002E0 4F                     732 	ld	c, a
      0002E1 06 00                  733 	ld	b, #0x00
                                    734 ;utils/tools.c:229: seed |= (uint16_t)DIV_REG << 8;
      0002E3 F0r00                  735 	ldh	a, (_DIV_REG + 0)
      0002E5 5F                     736 	ld	e, a
      0002E6 AF                     737 	xor	a, a
      0002E7 B1                     738 	or	a, c
      0002E8 4F                     739 	ld	c, a
      0002E9 7B                     740 	ld	a, e
      0002EA B0                     741 	or	a, b
      0002EB 47                     742 	ld	b, a
                                    743 ;utils/tools.c:230: initrand(seed);
      0002EC C5                     744 	push	bc
      0002ED CDr00r00               745 	call	_initrand
      0002F0 E1                     746 	pop	hl
                                    747 ;utils/tools.c:249: printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
      0002F1 11r14r03               748 	ld	de, #___str_4
      0002F4 D5                     749 	push	de
      0002F5 CDr00r00               750 	call	_puts
      0002F8 E1                     751 	pop	hl
                                    752 ;utils/tools.c:250: }
      0002F9 C9                     753 	ret
      0002FA                        754 ___str_2:
      0002FA 0A                     755 	.db 0x0a
      0002FB 0A                     756 	.db 0x0a
      0002FC 0A                     757 	.db 0x0a
      0002FD 0A                     758 	.db 0x0a
      0002FE 0A                     759 	.db 0x0a
      0002FF 0A                     760 	.db 0x0a
      000300 0A                     761 	.db 0x0a
      000301 20 20 20 20 20 20 50   762 	.ascii "      PRESS START!"
             52 45 53 53 20 53 54
             41 52 54 21
      000313 00                     763 	.db 0x00
      000314                        764 ___str_4:
      000314 0A                     765 	.db 0x0a
      000315 0A                     766 	.db 0x0a
      000316 0A                     767 	.db 0x0a
      000317 0A                     768 	.db 0x0a
      000318 0A                     769 	.db 0x0a
      000319 0A                     770 	.db 0x0a
      00031A 0A                     771 	.db 0x0a
      00031B 0A                     772 	.db 0x0a
      00031C 0A                     773 	.db 0x0a
      00031D 0A                     774 	.db 0x0a
      00031E 0A                     775 	.db 0x0a
      00031F 0A                     776 	.db 0x0a
      000320 0A                     777 	.db 0x0a
      000321 0A                     778 	.db 0x0a
      000322 0A                     779 	.db 0x0a
      000323 0A                     780 	.db 0x0a
      000324 0A                     781 	.db 0x0a
      000325 0A                     782 	.db 0x0a
      000326 00                     783 	.db 0x00
                                    784 ;utils/Sound/sound.c:4: void sound_init() {
                                    785 ;	---------------------------------
                                    786 ; Function sound_init
                                    787 ; ---------------------------------
      000327                        788 _sound_init::
                                    789 ;utils/Sound/sound.c:6: NR52_REG = 0x80;                //  Turns on sound
      000327 3E 80                  790 	ld	a, #0x80
      000329 E0r00                  791 	ldh	(_NR52_REG + 0), a
                                    792 ;utils/Sound/sound.c:7: NR50_REG = 0x77;                //  Sets the volume to max
      00032B 3E 77                  793 	ld	a, #0x77
      00032D E0r00                  794 	ldh	(_NR50_REG + 0), a
                                    795 ;utils/Sound/sound.c:8: NR51_REG = 0xFF;                
      00032F 3E FF                  796 	ld	a, #0xff
      000331 E0r00                  797 	ldh	(_NR51_REG + 0), a
                                    798 ;utils/Sound/sound.c:9: }
      000333 C9                     799 	ret
                                    800 ;utils/Sound/sound.c:11: void play_jumpy_sound() {
                                    801 ;	---------------------------------
                                    802 ; Function play_jumpy_sound
                                    803 ; ---------------------------------
      000334                        804 _play_jumpy_sound::
                                    805 ;utils/Sound/sound.c:20: NR10_REG = 0x06;
      000334 3E 06                  806 	ld	a, #0x06
      000336 E0r00                  807 	ldh	(_NR10_REG + 0), a
                                    808 ;utils/Sound/sound.c:28: NR11_REG = 0x88;
      000338 3E 88                  809 	ld	a, #0x88
      00033A E0r00                  810 	ldh	(_NR11_REG + 0), a
                                    811 ;utils/Sound/sound.c:38: NR12_REG = 0x73;
      00033C 3E 73                  812 	ld	a, #0x73
      00033E E0r00                  813 	ldh	(_NR12_REG + 0), a
                                    814 ;utils/Sound/sound.c:44: NR13_REG = 0x01;
      000340 3E 01                  815 	ld	a, #0x01
      000342 E0r00                  816 	ldh	(_NR13_REG + 0), a
                                    817 ;utils/Sound/sound.c:54: NR14_REG = 0xC7;
      000344 3E C7                  818 	ld	a, #0xc7
      000346 E0r00                  819 	ldh	(_NR14_REG + 0), a
                                    820 ;utils/Sound/sound.c:57: }
      000348 C9                     821 	ret
                                    822 ;main.c:42: void moveCharacter(Character* charac, uint8 x, uint8 y)
                                    823 ;	---------------------------------
                                    824 ; Function moveCharacter
                                    825 ; ---------------------------------
      000349                        826 _moveCharacter::
      000349 E8 FA                  827 	add	sp, #-6
                                    828 ;main.c:44: move_sprite(charac->spriteids[0], x, y);
      00034B F8 0C                  829 	ldhl	sp,	#12
      00034D 7E                     830 	ld	a, (hl)
      00034E F8 00                  831 	ldhl	sp,	#0
      000350 77                     832 	ld	(hl), a
      000351 2A                     833 	ld	a, (hl+)
      000352 77                     834 	ld	(hl), a
      000353 F8 0A                  835 	ldhl	sp,	#10
      000355 7E                     836 	ld	a, (hl)
      000356 F8 02                  837 	ldhl	sp,	#2
      000358 77                     838 	ld	(hl), a
      000359 2A                     839 	ld	a, (hl+)
      00035A 77                     840 	ld	(hl), a
      00035B F8 08                  841 	ldhl	sp,	#8
      00035D 7E                     842 	ld	a, (hl)
      00035E F8 04                  843 	ldhl	sp,	#4
      000360 77                     844 	ld	(hl), a
      000361 F8 09                  845 	ldhl	sp,	#9
      000363 7E                     846 	ld	a, (hl)
      000364 F8 05                  847 	ldhl	sp,	#5
      000366 32                     848 	ld	(hl-), a
      000367 2A                     849 	ld	a, (hl+)
      000368 5F                     850 	ld	e, a
      000369 56                     851 	ld	d, (hl)
      00036A 1A                     852 	ld	a, (de)
                                    853 ;c:/gbdk/include/gb/gb.h:1520: OAM_item_t * itm = &shadow_OAM[nb];
      00036B 6F                     854 	ld	l, a
      00036C 11r00r00               855 	ld	de, #_shadow_OAM+0
                                    856 ;	spillPairReg hl
                                    857 ;	spillPairReg hl
      00036F 26 00                  858 	ld	h, #0x00
                                    859 ;	spillPairReg hl
                                    860 ;	spillPairReg hl
      000371 29                     861 	add	hl, hl
      000372 29                     862 	add	hl, hl
      000373 19                     863 	add	hl, de
      000374 4D                     864 	ld	c, l
      000375 44                     865 	ld	b, h
                                    866 ;c:/gbdk/include/gb/gb.h:1521: itm->y=y, itm->x=x;
      000376 F8 01                  867 	ldhl	sp,	#1
      000378 2A                     868 	ld	a, (hl+)
      000379 23                     869 	inc	hl
      00037A 02                     870 	ld	(bc), a
      00037B 03                     871 	inc	bc
      00037C 7E                     872 	ld	a, (hl)
      00037D 02                     873 	ld	(bc), a
                                    874 ;main.c:45: move_sprite(charac->spriteids[1], x, y + SPRITE_HEIGHT);
      00037E F8 00                  875 	ldhl	sp,	#0
      000380 7E                     876 	ld	a, (hl)
      000381 C6 08                  877 	add	a, #0x08
      000383 4F                     878 	ld	c, a
      000384 F8 04                  879 	ldhl	sp,	#4
      000386 2A                     880 	ld	a, (hl+)
      000387 5F                     881 	ld	e, a
      000388 56                     882 	ld	d, (hl)
      000389 13                     883 	inc	de
      00038A 13                     884 	inc	de
      00038B 1A                     885 	ld	a, (de)
                                    886 ;c:/gbdk/include/gb/gb.h:1520: OAM_item_t * itm = &shadow_OAM[nb];
      00038C 6F                     887 	ld	l, a
      00038D 11r00r00               888 	ld	de, #_shadow_OAM+0
                                    889 ;	spillPairReg hl
                                    890 ;	spillPairReg hl
      000390 26 00                  891 	ld	h, #0x00
                                    892 ;	spillPairReg hl
                                    893 ;	spillPairReg hl
      000392 29                     894 	add	hl, hl
      000393 29                     895 	add	hl, hl
      000394 19                     896 	add	hl, de
                                    897 ;c:/gbdk/include/gb/gb.h:1521: itm->y=y, itm->x=x;
      000395 79                     898 	ld	a, c
      000396 22                     899 	ld	(hl+), a
      000397 4D                     900 	ld	c, l
      000398 44                     901 	ld	b, h
      000399 F8 02                  902 	ldhl	sp,	#2
                                    903 ;main.c:46: move_sprite(charac->spriteids[2], x, y + 2 * SPRITE_HEIGHT);
      00039B 3A                     904 	ld	a, (hl-)
      00039C 2B                     905 	dec	hl
      00039D 02                     906 	ld	(bc), a
      00039E 7E                     907 	ld	a, (hl)
      00039F C6 10                  908 	add	a, #0x10
      0003A1 4F                     909 	ld	c, a
      0003A2 F8 04                  910 	ldhl	sp,#4
      0003A4 2A                     911 	ld	a, (hl+)
      0003A5 5F                     912 	ld	e, a
      0003A6 56                     913 	ld	d, (hl)
      0003A7 21 04 00               914 	ld	hl, #0x0004
      0003AA 19                     915 	add	hl, de
      0003AB 5D                     916 	ld	e, l
      0003AC 54                     917 	ld	d, h
      0003AD 1A                     918 	ld	a, (de)
                                    919 ;c:/gbdk/include/gb/gb.h:1520: OAM_item_t * itm = &shadow_OAM[nb];
      0003AE 6F                     920 	ld	l, a
      0003AF 11r00r00               921 	ld	de, #_shadow_OAM+0
                                    922 ;	spillPairReg hl
                                    923 ;	spillPairReg hl
      0003B2 26 00                  924 	ld	h, #0x00
                                    925 ;	spillPairReg hl
                                    926 ;	spillPairReg hl
      0003B4 29                     927 	add	hl, hl
      0003B5 29                     928 	add	hl, hl
      0003B6 19                     929 	add	hl, de
                                    930 ;c:/gbdk/include/gb/gb.h:1521: itm->y=y, itm->x=x;
      0003B7 79                     931 	ld	a, c
      0003B8 22                     932 	ld	(hl+), a
      0003B9 4D                     933 	ld	c, l
      0003BA 44                     934 	ld	b, h
      0003BB F8 02                  935 	ldhl	sp,	#2
      0003BD 7E                     936 	ld	a, (hl)
      0003BE 02                     937 	ld	(bc), a
                                    938 ;main.c:46: move_sprite(charac->spriteids[2], x, y + 2 * SPRITE_HEIGHT);
                                    939 ;main.c:47: }
      0003BF E8 06                  940 	add	sp, #6
      0003C1 C9                     941 	ret
      0003C2                        942 _top:
      0003C2 00                     943 	.db #0x00	; 0
      0003C3                        944 _mid:
      0003C3 01                     945 	.db #0x01	; 1
      0003C4                        946 _low:
      0003C4 02                     947 	.db #0x02	; 2
      0003C5                        948 _ball:
      0003C5 03                     949 	.db #0x03	; 3
                                    950 ;main.c:52: void init_min_font()
                                    951 ;	---------------------------------
                                    952 ; Function init_min_font
                                    953 ; ---------------------------------
      0003C6                        954 _init_min_font::
                                    955 ;main.c:58: font_init();
      0003C6 CDr00r00               956 	call	_font_init
                                    957 ;main.c:59: min_font = font_load(font_min);
      0003C9 11r00r00               958 	ld	de, #_font_min
      0003CC D5                     959 	push	de
      0003CD CDr00r00               960 	call	_font_load
      0003D0 E1                     961 	pop	hl
                                    962 ;main.c:61: font_set(min_font);
      0003D1 D5                     963 	push	de
      0003D2 CDr00r00               964 	call	_font_set
      0003D5 E1                     965 	pop	hl
                                    966 ;main.c:63: make_show_win_map(AI_TILE_LOCATION, 1, 1, "0");
      0003D6 11rFBr03               967 	ld	de, #___str_5
      0003D9 D5                     968 	push	de
      0003DA 11 01 00               969 	ld	de, #0x0001
      0003DD D5                     970 	push	de
      0003DE D5                     971 	push	de
      0003DF 11 01 00               972 	ld	de, #0x0001
      0003E2 D5                     973 	push	de
      0003E3 CDrE2r00               974 	call	_make_show_win_map
      0003E6 E8 08                  975 	add	sp, #8
                                    976 ;main.c:65: make_show_win_map(PLAYER_TILE_LOCATION, 1, 1, "0");
      0003E8 11rFBr03               977 	ld	de, #___str_5
      0003EB D5                     978 	push	de
      0003EC 11 01 00               979 	ld	de, #0x0001
      0003EF D5                     980 	push	de
      0003F0 D5                     981 	push	de
      0003F1 11 11 00               982 	ld	de, #0x0011
      0003F4 D5                     983 	push	de
      0003F5 CDrE2r00               984 	call	_make_show_win_map
      0003F8 E8 08                  985 	add	sp, #8
                                    986 ;main.c:66: }
      0003FA C9                     987 	ret
      0003FB                        988 ___str_5:
      0003FB 30                     989 	.ascii "0"
      0003FC 00                     990 	.db 0x00
                                    991 ;main.c:69: void update_score(uint8 score, uint8_t tile)
                                    992 ;	---------------------------------
                                    993 ; Function update_score
                                    994 ; ---------------------------------
      0003FD                        995 _update_score::
      0003FD E8 FB                  996 	add	sp, #-5
                                    997 ;main.c:71: clear_portion(tile);
      0003FF F8 09                  998 	ldhl	sp,	#9
      000401 46                     999 	ld	b, (hl)
                                   1000 ;utils/tools.c:36: set_win_tiles(x, 1, 8, 1, clear_map);    
      000402 11rCFr00              1001 	ld	de, #_clear_map
      000405 D5                    1002 	push	de
      000406 21 08 01              1003 	ld	hl, #0x108
      000409 E5                    1004 	push	hl
      00040A 3E 01                 1005 	ld	a, #0x01
      00040C F5                    1006 	push	af
      00040D 33                    1007 	inc	sp
      00040E C5                    1008 	push	bc
      00040F 33                    1009 	inc	sp
      000410 CDr00r00              1010 	call	_set_win_tiles
      000413 E8 06                 1011 	add	sp, #6
                                   1012 ;main.c:75: : tile + number_count_minimal(score), 1, 1, toString(score));
      000415 C5                    1013 	push	bc
      000416 F8 09                 1014 	ldhl	sp,	#9
      000418 2A                    1015 	ld	a, (hl+)
      000419 5F                    1016 	ld	e, a
      00041A 56                    1017 	ld	d, (hl)
      00041B D5                    1018 	push	de
      00041C CDr00r00              1019 	call	_toString
      00041F E1                    1020 	pop	hl
      000420 F8 02                 1021 	ldhl	sp,	#2
      000422 7B                    1022 	ld	a, e
      000423 22                    1023 	ld	(hl+), a
      000424 72                    1024 	ld	(hl), d
      000425 C1                    1025 	pop	bc
                                   1026 ;main.c:74: ? tile - number_count_minimal(score)
      000426 F8 02                 1027 	ldhl	sp,	#2
      000428 78                    1028 	ld	a, b
      000429 22                    1029 	ld	(hl+), a
      00042A 36 00                 1030 	ld	(hl), #0x00
      00042C F8 07                 1031 	ldhl	sp,	#7
      00042E 2A                    1032 	ld	a, (hl+)
      00042F 4F                    1033 	ld	c, a
      000430 56                    1034 	ld	d, (hl)
                                   1035 ;utils/tools.c:55: if(score < 10)
      000431 79                    1036 	ld	a, c
      000432 D6 0A                 1037 	sub	a, #0x0a
      000434 7A                    1038 	ld	a, d
      000435 DE 00                 1039 	sbc	a, #0x00
      000437 3E 00                 1040 	ld	a, #0x00
      000439 17                    1041 	rla
                                   1042 ;	spillPairReg hl
                                   1043 ;	spillPairReg hl
                                   1044 ;utils/tools.c:59: else if(score < 100)
      00043A 79                    1045 	ld	a, c
      00043B D6 64                 1046 	sub	a, #0x64
      00043D 7A                    1047 	ld	a, d
      00043E DE 00                 1048 	sbc	a, #0x00
      000440 3E 00                 1049 	ld	a, #0x00
      000442 17                    1050 	rla
      000443 5F                    1051 	ld	e, a
                                   1052 ;utils/tools.c:63: else if(score < 1000)
      000444 79                    1053 	ld	a, c
      000445 D6 E8                 1054 	sub	a, #0xe8
      000447 7A                    1055 	ld	a, d
      000448 DE 03                 1056 	sbc	a, #0x03
      00044A 3E 00                 1057 	ld	a, #0x00
      00044C 17                    1058 	rla
      00044D F8 04                 1059 	ldhl	sp,	#4
      00044F 77                    1060 	ld	(hl), a
                                   1061 ;main.c:74: ? tile - number_count_minimal(score)
      000450 78                    1062 	ld	a, b
                                   1063 ;utils/tools.c:55: if(score < 10)
      000451 D6 11                 1064 	sub	a,#0x11
      000453 20 29                 1065 	jr	NZ, 00124$
      000455 B5                    1066 	or	a,l
      000456 28 04                 1067 	jr	Z, 00109$
                                   1068 ;utils/tools.c:57: return 0;
      000458 1E 00                 1069 	ld	e, #0x00
      00045A 18 12                 1070 	jr	00111$
      00045C                       1071 00109$:
                                   1072 ;utils/tools.c:59: else if(score < 100)
      00045C 7B                    1073 	ld	a, e
      00045D B7                    1074 	or	a, a
      00045E 28 04                 1075 	jr	Z, 00107$
                                   1076 ;utils/tools.c:61: return 1;
      000460 1E 01                 1077 	ld	e, #0x01
      000462 18 0A                 1078 	jr	00111$
      000464                       1079 00107$:
                                   1080 ;utils/tools.c:63: else if(score < 1000)
      000464 F8 04                 1081 	ldhl	sp,	#4
      000466 7E                    1082 	ld	a, (hl)
      000467 B7                    1083 	or	a, a
                                   1084 ;utils/tools.c:65: return 2;
                                   1085 ;utils/tools.c:67: else return 3;
                                   1086 ;main.c:74: ? tile - number_count_minimal(score)
      000468 1E 02                 1087 	ld	e, #0x02
      00046A 20 02                 1088 	jr	NZ, 00111$
      00046C 1E 03                 1089 	ld	e, #0x03
      00046E                       1090 00111$:
      00046E 4B                    1091 	ld	c, e
      00046F 06 00                 1092 	ld	b, #0x00
      000471 F8 02                 1093 	ldhl	sp,#2
      000473 2A                    1094 	ld	a, (hl+)
      000474 5F                    1095 	ld	e, a
      000475 56                    1096 	ld	d, (hl)
      000476 7B                    1097 	ld	a, e
      000477 91                    1098 	sub	a, c
      000478 5F                    1099 	ld	e, a
      000479 7A                    1100 	ld	a, d
      00047A 98                    1101 	sbc	a, b
      00047B 4B                    1102 	ld	c, e
      00047C 18 24                 1103 	jr	00125$
      00047E                       1104 00124$:
                                   1105 ;utils/tools.c:55: if(score < 10)
      00047E 7D                    1106 	ld	a, l
      00047F B7                    1107 	or	a, a
      000480 28 04                 1108 	jr	Z, 00119$
                                   1109 ;utils/tools.c:57: return 0;
      000482 0E 00                 1110 	ld	c, #0x00
      000484 18 12                 1111 	jr	00121$
      000486                       1112 00119$:
                                   1113 ;utils/tools.c:59: else if(score < 100)
      000486 7B                    1114 	ld	a, e
      000487 B7                    1115 	or	a, a
      000488 28 04                 1116 	jr	Z, 00117$
                                   1117 ;utils/tools.c:61: return 1;
      00048A 0E 01                 1118 	ld	c, #0x01
      00048C 18 0A                 1119 	jr	00121$
      00048E                       1120 00117$:
                                   1121 ;utils/tools.c:63: else if(score < 1000)
      00048E F8 04                 1122 	ldhl	sp,	#4
      000490 7E                    1123 	ld	a, (hl)
      000491 B7                    1124 	or	a, a
                                   1125 ;utils/tools.c:65: return 2;
                                   1126 ;utils/tools.c:67: else return 3;
                                   1127 ;main.c:75: : tile + number_count_minimal(score), 1, 1, toString(score));
      000492 0E 02                 1128 	ld	c, #0x02
      000494 20 02                 1129 	jr	NZ, 00121$
      000496 0E 03                 1130 	ld	c, #0x03
      000498                       1131 00121$:
      000498 06 00                 1132 	ld	b, #0x00
      00049A F8 02                 1133 	ldhl	sp,	#2
      00049C 2A                    1134 	ld	a,	(hl+)
      00049D 66                    1135 	ld	h, (hl)
      00049E 6F                    1136 	ld	l, a
      00049F 09                    1137 	add	hl, bc
      0004A0 4D                    1138 	ld	c, l
      0004A1 7C                    1139 	ld	a, h
      0004A2                       1140 00125$:
      0004A2 D1                    1141 	pop	de
      0004A3 D5                    1142 	push	de
      0004A4 D5                    1143 	push	de
      0004A5 11 01 00              1144 	ld	de, #0x0001
      0004A8 D5                    1145 	push	de
      0004A9 D5                    1146 	push	de
      0004AA 47                    1147 	ld	b, a
      0004AB C5                    1148 	push	bc
      0004AC CDrE2r00              1149 	call	_make_show_win_map
                                   1150 ;main.c:77: }
      0004AF E8 0D                 1151 	add	sp, #13
      0004B1 C9                    1152 	ret
                                   1153 ;main.c:80: void init_player()
                                   1154 ;	---------------------------------
                                   1155 ; Function init_player
                                   1156 ; ---------------------------------
      0004B2                       1157 _init_player::
                                   1158 ;main.c:82: player.width = 8;
      0004B2 21r0Ar00              1159 	ld	hl, #(_player + 10)
      0004B5 3E 08                 1160 	ld	a, #0x08
      0004B7 22                    1161 	ld	(hl+), a
      0004B8 36 00                 1162 	ld	(hl), #0x00
                                   1163 ;main.c:83: player.height = 24;
      0004BA 21r08r00              1164 	ld	hl, #(_player + 8)
      0004BD 3E 18                 1165 	ld	a, #0x18
      0004BF 22                    1166 	ld	(hl+), a
      0004C0 36 00                 1167 	ld	(hl), #0x00
                                   1168 ;main.c:85: player.x = 140;
      0004C2 01r06r00              1169 	ld	bc, #_player + 6
      0004C5 3E 8C                 1170 	ld	a, #0x8c
      0004C7 02                    1171 	ld	(bc), a
                                   1172 ;main.c:86: player.y = MIDY;
      0004C8 21r07r00              1173 	ld	hl, #(_player + 7)
      0004CB 36 48                 1174 	ld	(hl), #0x48
                                   1175 ;main.c:88: player.score = 0;
      0004CD 21r0Cr00              1176 	ld	hl, #(_player + 12)
      0004D0 AF                    1177 	xor	a, a
      0004D1 22                    1178 	ld	(hl+), a
      0004D2 77                    1179 	ld	(hl), a
                                   1180 ;c:/gbdk/include/gb/gb.h:1447: shadow_OAM[nb].tile=tile;
      0004D3 21r02r00              1181 	ld	hl, #(_shadow_OAM + 2)
      0004D6 36 00                 1182 	ld	(hl), #0x00
                                   1183 ;main.c:91: player.spriteids[0] = 0;
      0004D8 21r00r00              1184 	ld	hl, #_player
      0004DB AF                    1185 	xor	a, a
      0004DC 22                    1186 	ld	(hl+), a
      0004DD 77                    1187 	ld	(hl), a
                                   1188 ;c:/gbdk/include/gb/gb.h:1447: shadow_OAM[nb].tile=tile;
      0004DE 21r06r00              1189 	ld	hl, #(_shadow_OAM + 6)
      0004E1 36 01                 1190 	ld	(hl), #0x01
                                   1191 ;main.c:93: player.spriteids[1] = 1;
      0004E3 21r02r00              1192 	ld	hl, #(_player + 2)
      0004E6 3E 01                 1193 	ld	a, #0x01
      0004E8 22                    1194 	ld	(hl+), a
      0004E9 36 00                 1195 	ld	(hl), #0x00
                                   1196 ;c:/gbdk/include/gb/gb.h:1447: shadow_OAM[nb].tile=tile;
      0004EB 21r0Ar00              1197 	ld	hl, #(_shadow_OAM + 10)
      0004EE 36 02                 1198 	ld	(hl), #0x02
                                   1199 ;main.c:95: player.spriteids[2] = 2;
      0004F0 21r04r00              1200 	ld	hl, #(_player + 4)
      0004F3 3E 02                 1201 	ld	a, #0x02
      0004F5 22                    1202 	ld	(hl+), a
      0004F6 36 00                 1203 	ld	(hl), #0x00
                                   1204 ;main.c:97: moveCharacter(&player, player.x, player.y);
      0004F8 FAr07r00              1205 	ld	a, (#(_player + 7) + 0)
      0004FB 5F                    1206 	ld	e, a
      0004FC 16 00                 1207 	ld	d, #0x00
      0004FE 0A                    1208 	ld	a, (bc)
      0004FF 06 00                 1209 	ld	b, #0x00
      000501 D5                    1210 	push	de
      000502 4F                    1211 	ld	c, a
      000503 C5                    1212 	push	bc
      000504 11r00r00              1213 	ld	de, #_player
      000507 D5                    1214 	push	de
      000508 CDr49r03              1215 	call	_moveCharacter
      00050B E8 06                 1216 	add	sp, #6
                                   1217 ;main.c:99: }
      00050D C9                    1218 	ret
                                   1219 ;main.c:101: void init_AI()
                                   1220 ;	---------------------------------
                                   1221 ; Function init_AI
                                   1222 ; ---------------------------------
      00050E                       1223 _init_AI::
                                   1224 ;main.c:103: AI.width = 8;
      00050E 21r18r00              1225 	ld	hl, #(_AI + 10)
      000511 3E 08                 1226 	ld	a, #0x08
      000513 22                    1227 	ld	(hl+), a
      000514 36 00                 1228 	ld	(hl), #0x00
                                   1229 ;main.c:104: AI.height = 24;
      000516 21r16r00              1230 	ld	hl, #(_AI + 8)
      000519 3E 18                 1231 	ld	a, #0x18
      00051B 22                    1232 	ld	(hl+), a
      00051C 36 00                 1233 	ld	(hl), #0x00
                                   1234 ;main.c:106: AI.x = 20;
      00051E 21r14r00              1235 	ld	hl, #(_AI + 6)
      000521 36 14                 1236 	ld	(hl), #0x14
                                   1237 ;main.c:107: AI.y = MIDY;
      000523 21r15r00              1238 	ld	hl, #(_AI + 7)
      000526 36 48                 1239 	ld	(hl), #0x48
                                   1240 ;main.c:109: AI.score = 0;
      000528 21r1Ar00              1241 	ld	hl, #(_AI + 12)
      00052B AF                    1242 	xor	a, a
      00052C 22                    1243 	ld	(hl+), a
      00052D 77                    1244 	ld	(hl), a
                                   1245 ;c:/gbdk/include/gb/gb.h:1447: shadow_OAM[nb].tile=tile;
      00052E 21r0Er00              1246 	ld	hl, #(_shadow_OAM + 14)
      000531 36 00                 1247 	ld	(hl), #0x00
                                   1248 ;main.c:112: AI.spriteids[0] = 3;
      000533 21r0Er00              1249 	ld	hl, #_AI
      000536 3E 03                 1250 	ld	a, #0x03
      000538 22                    1251 	ld	(hl+), a
      000539 36 00                 1252 	ld	(hl), #0x00
                                   1253 ;c:/gbdk/include/gb/gb.h:1447: shadow_OAM[nb].tile=tile;
      00053B 21r12r00              1254 	ld	hl, #(_shadow_OAM + 18)
      00053E 36 01                 1255 	ld	(hl), #0x01
                                   1256 ;main.c:114: AI.spriteids[1] = 4;
      000540 21r10r00              1257 	ld	hl, #(_AI + 2)
      000543 3E 04                 1258 	ld	a, #0x04
      000545 22                    1259 	ld	(hl+), a
      000546 36 00                 1260 	ld	(hl), #0x00
                                   1261 ;c:/gbdk/include/gb/gb.h:1447: shadow_OAM[nb].tile=tile;
      000548 21r16r00              1262 	ld	hl, #(_shadow_OAM + 22)
      00054B 36 02                 1263 	ld	(hl), #0x02
                                   1264 ;main.c:116: AI.spriteids[2] = 5;
      00054D 21r12r00              1265 	ld	hl, #(_AI + 4)
      000550 3E 05                 1266 	ld	a, #0x05
      000552 22                    1267 	ld	(hl+), a
      000553 36 00                 1268 	ld	(hl), #0x00
                                   1269 ;main.c:118: AICentre = AI.y + AI.height/2;
      000555 21r15r00              1270 	ld	hl, #(_AI + 7)
      000558 4E                    1271 	ld	c, (hl)
      000559 21r16r00              1272 	ld	hl, #(_AI + 8)
      00055C 2A                    1273 	ld	a, (hl+)
      00055D 47                    1274 	ld	b, a
      00055E 6E                    1275 	ld	l, (hl)
                                   1276 ;	spillPairReg hl
      00055F CB 3D                 1277 	srl	l
      000561 CB 18                 1278 	rr	b
      000563 78                    1279 	ld	a, b
      000564 81                    1280 	add	a, c
      000565 EAr1Er00              1281 	ld	(#_AICentre),a
                                   1282 ;main.c:120: moveCharacter(&AI, AI.x, AI.y);
      000568 FAr15r00              1283 	ld	a, (#(_AI + 7) + 0)
      00056B 4F                    1284 	ld	c, a
      00056C 06 00                 1285 	ld	b, #0x00
      00056E FAr14r00              1286 	ld	a, (#(_AI + 6) + 0)
      000571 16 00                 1287 	ld	d, #0x00
      000573 C5                    1288 	push	bc
      000574 5F                    1289 	ld	e, a
      000575 D5                    1290 	push	de
      000576 11r0Er00              1291 	ld	de, #_AI
      000579 D5                    1292 	push	de
      00057A CDr49r03              1293 	call	_moveCharacter
      00057D E8 06                 1294 	add	sp, #6
                                   1295 ;main.c:122: }
      00057F C9                    1296 	ret
                                   1297 ;main.c:124: void init_ball()
                                   1298 ;	---------------------------------
                                   1299 ; Function init_ball
                                   1300 ; ---------------------------------
      000580                       1301 _init_ball::
                                   1302 ;main.c:126: xBall = MIDX;
      000580 21r00r00              1303 	ld	hl, #_xBall
      000583 3E 50                 1304 	ld	a, #0x50
      000585 22                    1305 	ld	(hl+), a
      000586 AF                    1306 	xor	a, a
      000587 77                    1307 	ld	(hl), a
                                   1308 ;main.c:127: yBall = MIDY + SPRITE_HEIGHT;
      000588 21r02r00              1309 	ld	hl, #_yBall
      00058B 3E 50                 1310 	ld	a, #0x50
      00058D 22                    1311 	ld	(hl+), a
      00058E AF                    1312 	xor	a, a
      00058F 77                    1313 	ld	(hl), a
                                   1314 ;main.c:130: speed_y = 3;
      000590 21r1Cr00              1315 	ld	hl, #_speed_y
      000593 36 03                 1316 	ld	(hl), #0x03
                                   1317 ;main.c:131: speed_x = 1;
      000595 21r1Dr00              1318 	ld	hl, #_speed_x
      000598 36 01                 1319 	ld	(hl), #0x01
                                   1320 ;main.c:133: ball_alive = 1;
      00059A 21r1Fr00              1321 	ld	hl, #_ball_alive
      00059D 36 01                 1322 	ld	(hl), #0x01
                                   1323 ;main.c:138: set_sprite_tile(BALL_SPRITE, ball);
      00059F 21rC5r03              1324 	ld	hl, #_ball
      0005A2 4E                    1325 	ld	c, (hl)
                                   1326 ;c:/gbdk/include/gb/gb.h:1447: shadow_OAM[nb].tile=tile;
      0005A3 21r1Ar00              1327 	ld	hl, #(_shadow_OAM + 26)
      0005A6 71                    1328 	ld	(hl), c
                                   1329 ;main.c:139: move_sprite(BALL_SPRITE, xBall, yBall);
      0005A7 21r02r00              1330 	ld	hl, #_yBall
      0005AA 46                    1331 	ld	b, (hl)
      0005AB 21r00r00              1332 	ld	hl, #_xBall
      0005AE 4E                    1333 	ld	c, (hl)
                                   1334 ;c:/gbdk/include/gb/gb.h:1520: OAM_item_t * itm = &shadow_OAM[nb];
      0005AF 21r18r00              1335 	ld	hl, #(_shadow_OAM + 24)
                                   1336 ;c:/gbdk/include/gb/gb.h:1521: itm->y=y, itm->x=x;
      0005B2 78                    1337 	ld	a, b
      0005B3 22                    1338 	ld	(hl+), a
      0005B4 71                    1339 	ld	(hl), c
                                   1340 ;main.c:139: move_sprite(BALL_SPRITE, xBall, yBall);
                                   1341 ;main.c:140: }
      0005B5 C9                    1342 	ret
                                   1343 ;main.c:187: void movement()
                                   1344 ;	---------------------------------
                                   1345 ; Function movement
                                   1346 ; ---------------------------------
      0005B6                       1347 _movement::
                                   1348 ;main.c:189: if(UP)
      0005B6 CDr00r00              1349 	call	_joypad
      0005B9 CB 53                 1350 	bit	2, e
      0005BB 28 07                 1351 	jr	Z, 00102$
                                   1352 ;main.c:191: player.y -= 4;
      0005BD 01r07r00              1353 	ld	bc, #_player+7
      0005C0 0A                    1354 	ld	a, (bc)
      0005C1 C6 FC                 1355 	add	a, #0xfc
      0005C3 02                    1356 	ld	(bc), a
      0005C4                       1357 00102$:
                                   1358 ;main.c:195: if(DOWN)
      0005C4 CDr00r00              1359 	call	_joypad
      0005C7 CB 5B                 1360 	bit	3, e
      0005C9 28 07                 1361 	jr	Z, 00104$
                                   1362 ;main.c:197: player.y += 4;
      0005CB 01r07r00              1363 	ld	bc, #_player+7
      0005CE 0A                    1364 	ld	a, (bc)
      0005CF C6 04                 1365 	add	a, #0x04
      0005D1 02                    1366 	ld	(bc), a
      0005D2                       1367 00104$:
                                   1368 ;main.c:201: if(player.y <= 20)
      0005D2 21r07r00              1369 	ld	hl, #_player + 7
      0005D5 4E                    1370 	ld	c, (hl)
      0005D6 3E 14                 1371 	ld	a, #0x14
      0005D8 91                    1372 	sub	a, c
      0005D9 38 04                 1373 	jr	C, 00108$
                                   1374 ;main.c:202: player.y = 20;
      0005DB 36 14                 1375 	ld	(hl), #0x14
      0005DD 18 07                 1376 	jr	00109$
      0005DF                       1377 00108$:
                                   1378 ;main.c:203: else if(player.y >= SCREENHEIGHT - 20)
      0005DF 79                    1379 	ld	a, c
      0005E0 D6 7C                 1380 	sub	a, #0x7c
      0005E2 38 02                 1381 	jr	C, 00109$
                                   1382 ;main.c:204: player.y = SCREENHEIGHT - 20;
      0005E4 36 7C                 1383 	ld	(hl), #0x7c
      0005E6                       1384 00109$:
                                   1385 ;main.c:206: moveCharacter(&player, player.x, player.y);
      0005E6 4E                    1386 	ld	c, (hl)
      0005E7 06 00                 1387 	ld	b, #0x00
      0005E9 FAr06r00              1388 	ld	a, (#(_player + 6) + 0)
      0005EC 16 00                 1389 	ld	d, #0x00
      0005EE C5                    1390 	push	bc
      0005EF 5F                    1391 	ld	e, a
      0005F0 D5                    1392 	push	de
      0005F1 11r00r00              1393 	ld	de, #_player
      0005F4 D5                    1394 	push	de
      0005F5 CDr49r03              1395 	call	_moveCharacter
      0005F8 E8 06                 1396 	add	sp, #6
                                   1397 ;main.c:208: }
      0005FA C9                    1398 	ret
                                   1399 ;main.c:210: void ai_movement(uint8_t offset, uint8_t speed)
                                   1400 ;	---------------------------------
                                   1401 ; Function ai_movement
                                   1402 ; ---------------------------------
      0005FB                       1403 _ai_movement::
      0005FB 3B                    1404 	dec	sp
                                   1405 ;main.c:213: if(AICentre + offset < yBall)
      0005FC FAr1Er00              1406 	ld	a, (#_AICentre)
      0005FF 06 00                 1407 	ld	b, #0x00
      000601 F8 03                 1408 	ldhl	sp,	#3
      000603 5E                    1409 	ld	e, (hl)
      000604 16 00                 1410 	ld	d, #0x00
      000606 83                    1411 	add	a, e
      000607 4F                    1412 	ld	c, a
      000608 78                    1413 	ld	a, b
      000609 8A                    1414 	adc	a, d
      00060A 47                    1415 	ld	b, a
      00060B 21r02r00              1416 	ld	hl, #_yBall
      00060E 79                    1417 	ld	a, c
      00060F 96                    1418 	sub	a, (hl)
      000610 23                    1419 	inc	hl
      000611 78                    1420 	ld	a, b
      000612 9E                    1421 	sbc	a, (hl)
      000613 30 0A                 1422 	jr	NC, 00104$
                                   1423 ;main.c:215: AI.y += speed;
      000615 01r15r00              1424 	ld	bc, #_AI+7
      000618 0A                    1425 	ld	a, (bc)
      000619 F8 04                 1426 	ldhl	sp,	#4
      00061B 86                    1427 	add	a, (hl)
      00061C 02                    1428 	ld	(bc), a
      00061D 18 11                 1429 	jr	00105$
      00061F                       1430 00104$:
                                   1431 ;main.c:217: else if(AICentre + offset > yBall)
      00061F 21r02r00              1432 	ld	hl, #_yBall
      000622 2A                    1433 	ld	a, (hl+)
      000623 91                    1434 	sub	a, c
      000624 7E                    1435 	ld	a, (hl)
      000625 98                    1436 	sbc	a, b
      000626 30 08                 1437 	jr	NC, 00105$
                                   1438 ;main.c:219: AI.y -= speed;
      000628 01r15r00              1439 	ld	bc, #_AI+7
      00062B 0A                    1440 	ld	a, (bc)
      00062C F8 04                 1441 	ldhl	sp,	#4
      00062E 96                    1442 	sub	a, (hl)
      00062F 02                    1443 	ld	(bc), a
      000630                       1444 00105$:
                                   1445 ;main.c:222: if(AI.y <= 20)
      000630 01r15r00              1446 	ld	bc, #_AI + 7
      000633 0A                    1447 	ld	a, (bc)
      000634 5F                    1448 	ld	e, a
                                   1449 ;main.c:223: AI.y = 20;
      000635 3E 14                 1450 	ld	a,#0x14
      000637 BB                    1451 	cp	a,e
      000638 38 03                 1452 	jr	C, 00109$
      00063A 02                    1453 	ld	(bc), a
      00063B 18 08                 1454 	jr	00110$
      00063D                       1455 00109$:
                                   1456 ;main.c:224: else if(AI.y >= SCREENHEIGHT - 20)
      00063D 7B                    1457 	ld	a, e
      00063E D6 7C                 1458 	sub	a, #0x7c
      000640 38 03                 1459 	jr	C, 00110$
                                   1460 ;main.c:225: AI.y = SCREENHEIGHT - 20;
      000642 3E 7C                 1461 	ld	a, #0x7c
      000644 02                    1462 	ld	(bc), a
      000645                       1463 00110$:
                                   1464 ;main.c:227: AICentre = AI.y + AI.height/2;
      000645 0A                    1465 	ld	a, (bc)
      000646 F8 00                 1466 	ldhl	sp,	#0
      000648 77                    1467 	ld	(hl), a
      000649 21r16r00              1468 	ld	hl, #(_AI + 8)
      00064C 2A                    1469 	ld	a,	(hl+)
      00064D 66                    1470 	ld	h, (hl)
                                   1471 ;	spillPairReg hl
      00064E 6F                    1472 	ld	l, a
                                   1473 ;	spillPairReg hl
                                   1474 ;	spillPairReg hl
      00064F CB 3C                 1475 	srl	h
      000651 CB 1D                 1476 	rr	l
      000653 7D                    1477 	ld	a, l
      000654 F8 00                 1478 	ldhl	sp,	#0
      000656 86                    1479 	add	a, (hl)
      000657 EAr1Er00              1480 	ld	(#_AICentre),a
                                   1481 ;main.c:229: moveCharacter(&AI, AI.x, AI.y);
      00065A 0A                    1482 	ld	a, (bc)
      00065B 4F                    1483 	ld	c, a
      00065C 06 00                 1484 	ld	b, #0x00
      00065E FAr14r00              1485 	ld	a, (#(_AI + 6) + 0)
      000661 16 00                 1486 	ld	d, #0x00
      000663 C5                    1487 	push	bc
      000664 5F                    1488 	ld	e, a
      000665 D5                    1489 	push	de
      000666 11r0Er00              1490 	ld	de, #_AI
      000669 D5                    1491 	push	de
      00066A CDr49r03              1492 	call	_moveCharacter
                                   1493 ;main.c:231: }
      00066D E8 07                 1494 	add	sp, #7
      00066F C9                    1495 	ret
                                   1496 ;main.c:261: void ball_movement()
                                   1497 ;	---------------------------------
                                   1498 ; Function ball_movement
                                   1499 ; ---------------------------------
      000670                       1500 _ball_movement::
      000670 E8 F0                 1501 	add	sp, #-16
                                   1502 ;main.c:264: UBYTE collisioned = collision(&player) || collision(&AI);
      000672 FAr06r00              1503 	ld	a, (#(_player + 6) + 0)
      000675 4F                    1504 	ld	c, a
      000676 06 00                 1505 	ld	b, #0x00
      000678 21r00r00              1506 	ld	hl, #_xBall
      00067B 2A                    1507 	ld	a, (hl+)
      00067C 5F                    1508 	ld	e, a
      00067D 56                    1509 	ld	d, (hl)
      00067E 21 08 00              1510 	ld	hl, #0x0008
      000681 19                    1511 	add	hl, de
      000682 33                    1512 	inc	sp
      000683 33                    1513 	inc	sp
      000684 E5                    1514 	push	hl
      000685 21r02r00              1515 	ld	hl, #_yBall
      000688 2A                    1516 	ld	a, (hl+)
      000689 5F                    1517 	ld	e, a
      00068A 56                    1518 	ld	d, (hl)
      00068B 21 08 00              1519 	ld	hl, #0x0008
      00068E 19                    1520 	add	hl, de
      00068F E5                    1521 	push	hl
      000690 7D                    1522 	ld	a, l
      000691 F8 04                 1523 	ldhl	sp,	#4
      000693 77                    1524 	ld	(hl), a
      000694 E1                    1525 	pop	hl
      000695 7C                    1526 	ld	a, h
      000696 F8 03                 1527 	ldhl	sp,	#3
      000698 77                    1528 	ld	(hl), a
      000699 21r00r00              1529 	ld	hl, #_xBall
      00069C 2A                    1530 	ld	a, (hl+)
      00069D 5F                    1531 	ld	e, a
      00069E 56                    1532 	ld	d, (hl)
      00069F 6B                    1533 	ld	l, e
      0006A0 62                    1534 	ld	h, d
      0006A1 23                    1535 	inc	hl
      0006A2 E5                    1536 	push	hl
      0006A3 7D                    1537 	ld	a, l
      0006A4 F8 06                 1538 	ldhl	sp,	#6
      0006A6 77                    1539 	ld	(hl), a
      0006A7 E1                    1540 	pop	hl
      0006A8 7C                    1541 	ld	a, h
      0006A9 F8 05                 1542 	ldhl	sp,	#5
      0006AB 77                    1543 	ld	(hl), a
      0006AC 21r00r00              1544 	ld	hl, #_xBall
      0006AF 2A                    1545 	ld	a, (hl+)
      0006B0 5F                    1546 	ld	e, a
      0006B1 56                    1547 	ld	d, (hl)
      0006B2 21 01 00              1548 	ld	hl, #0x0001
      0006B5 7B                    1549 	ld	a, e
      0006B6 95                    1550 	sub	a, l
      0006B7 5F                    1551 	ld	e, a
      0006B8 7A                    1552 	ld	a, d
      0006B9 9C                    1553 	sbc	a, h
      0006BA F8 07                 1554 	ldhl	sp,	#7
      0006BC 32                    1555 	ld	(hl-), a
      0006BD 73                    1556 	ld	(hl), e
      0006BE 21r02r00              1557 	ld	hl, #_yBall
      0006C1 2A                    1558 	ld	a, (hl+)
      0006C2 5F                    1559 	ld	e, a
      0006C3 56                    1560 	ld	d, (hl)
      0006C4 6B                    1561 	ld	l, e
      0006C5 62                    1562 	ld	h, d
      0006C6 23                    1563 	inc	hl
      0006C7 E5                    1564 	push	hl
      0006C8 7D                    1565 	ld	a, l
      0006C9 F8 0A                 1566 	ldhl	sp,	#10
      0006CB 77                    1567 	ld	(hl), a
      0006CC E1                    1568 	pop	hl
      0006CD 7C                    1569 	ld	a, h
      0006CE F8 09                 1570 	ldhl	sp,	#9
      0006D0 77                    1571 	ld	(hl), a
      0006D1 21r02r00              1572 	ld	hl, #_yBall
      0006D4 2A                    1573 	ld	a, (hl+)
      0006D5 5F                    1574 	ld	e, a
      0006D6 56                    1575 	ld	d, (hl)
      0006D7 21 01 00              1576 	ld	hl, #0x0001
      0006DA 7B                    1577 	ld	a, e
      0006DB 95                    1578 	sub	a, l
      0006DC 5F                    1579 	ld	e, a
      0006DD 7A                    1580 	ld	a, d
      0006DE 9C                    1581 	sbc	a, h
      0006DF F8 0B                 1582 	ldhl	sp,	#11
      0006E1 32                    1583 	ld	(hl-), a
      0006E2 7B                    1584 	ld	a, e
      0006E3 22                    1585 	ld	(hl+), a
      0006E4 23                    1586 	inc	hl
      0006E5 FAr06r00              1587 	ld	a, (#(_player + 6) + 0)
      0006E8 22                    1588 	ld	(hl+), a
      0006E9 36 00                 1589 	ld	(hl), #0x00
      0006EB 23                    1590 	inc	hl
      0006EC 5F                    1591 	ld	e, a
      0006ED 16 00                 1592 	ld	d, #0x00
      0006EF 7B                    1593 	ld	a, e
      0006F0 22                    1594 	ld	(hl+), a
      0006F1 72                    1595 	ld	(hl), d
      0006F2 21r00r00              1596 	ld	hl, #_xBall
      0006F5 79                    1597 	ld	a, c
      0006F6 96                    1598 	sub	a, (hl)
      0006F7 23                    1599 	inc	hl
      0006F8 78                    1600 	ld	a, b
      0006F9 9E                    1601 	sbc	a, (hl)
      0006FA 38 21                 1602 	jr	C, 00124$
      0006FC F8 00                 1603 	ldhl	sp,	#0
      0006FE 2A                    1604 	ld	a, (hl+)
      0006FF 91                    1605 	sub	a, c
      000700 7E                    1606 	ld	a, (hl)
      000701 98                    1607 	sbc	a, b
      000702 38 19                 1608 	jr	C, 00124$
      000704 FAr07r00              1609 	ld	a, (#(_player + 7) + 0)
      000707 4F                    1610 	ld	c, a
      000708 06 00                 1611 	ld	b, #0x00
      00070A 21r02r00              1612 	ld	hl, #_yBall
      00070D 79                    1613 	ld	a, c
      00070E 96                    1614 	sub	a, (hl)
      00070F 23                    1615 	inc	hl
      000710 78                    1616 	ld	a, b
      000711 9E                    1617 	sbc	a, (hl)
      000712 38 09                 1618 	jr	C, 00124$
      000714 F8 02                 1619 	ldhl	sp,	#2
      000716 2A                    1620 	ld	a, (hl+)
      000717 91                    1621 	sub	a, c
      000718 7E                    1622 	ld	a, (hl)
      000719 98                    1623 	sbc	a, b
      00071A D2rB2r07              1624 	jp	NC, 00139$
      00071D                       1625 00124$:
      00071D 11r00r00              1626 	ld	de, #_xBall
      000720 F8 0C                 1627 	ldhl	sp,	#12
      000722 1A                    1628 	ld	a, (de)
      000723 13                    1629 	inc	de
      000724 96                    1630 	sub	a, (hl)
      000725 23                    1631 	inc	hl
      000726 1A                    1632 	ld	a, (de)
      000727 9E                    1633 	sbc	a, (hl)
      000728 38 3D                 1634 	jr	C, 00128$
      00072A 21r0Ar00              1635 	ld	hl, #(_player + 10)
      00072D 2A                    1636 	ld	a, (hl+)
      00072E 4F                    1637 	ld	c, a
      00072F 46                    1638 	ld	b, (hl)
      000730 F8 0E                 1639 	ldhl	sp,	#14
      000732 2A                    1640 	ld	a,	(hl+)
      000733 66                    1641 	ld	h, (hl)
      000734 6F                    1642 	ld	l, a
      000735 09                    1643 	add	hl, bc
      000736 4D                    1644 	ld	c, l
      000737 44                    1645 	ld	b, h
      000738 21r00r00              1646 	ld	hl, #_xBall
      00073B 79                    1647 	ld	a, c
      00073C 96                    1648 	sub	a, (hl)
      00073D 23                    1649 	inc	hl
      00073E 78                    1650 	ld	a, b
      00073F 9E                    1651 	sbc	a, (hl)
      000740 38 25                 1652 	jr	C, 00128$
      000742 21r07r00              1653 	ld	hl, #(_player + 7)
      000745 4E                    1654 	ld	c, (hl)
      000746 41                    1655 	ld	b, c
      000747 1E 00                 1656 	ld	e, #0x00
      000749 21r02r00              1657 	ld	hl, #_yBall
      00074C 2A                    1658 	ld	a, (hl+)
      00074D 90                    1659 	sub	a, b
      00074E 7E                    1660 	ld	a, (hl)
      00074F 9B                    1661 	sbc	a, e
      000750 38 15                 1662 	jr	C, 00128$
      000752 06 00                 1663 	ld	b, #0x00
      000754 21r08r00              1664 	ld	hl, #(_player + 8)
      000757 2A                    1665 	ld	a,	(hl+)
      000758 66                    1666 	ld	h, (hl)
                                   1667 ;	spillPairReg hl
      000759 6F                    1668 	ld	l, a
                                   1669 ;	spillPairReg hl
                                   1670 ;	spillPairReg hl
      00075A 09                    1671 	add	hl, bc
      00075B 4D                    1672 	ld	c, l
      00075C 44                    1673 	ld	b, h
      00075D 21r02r00              1674 	ld	hl, #_yBall
      000760 79                    1675 	ld	a, c
      000761 96                    1676 	sub	a, (hl)
      000762 23                    1677 	inc	hl
      000763 78                    1678 	ld	a, b
      000764 9E                    1679 	sbc	a, (hl)
      000765 30 4B                 1680 	jr	NC, 00139$
      000767                       1681 00128$:
      000767 F8 00                 1682 	ldhl	sp,	#0
      000769 5D                    1683 	ld	e, l
      00076A 54                    1684 	ld	d, h
      00076B F8 0C                 1685 	ldhl	sp,	#12
      00076D 1A                    1686 	ld	a, (de)
      00076E 13                    1687 	inc	de
      00076F 96                    1688 	sub	a, (hl)
      000770 23                    1689 	inc	hl
      000771 1A                    1690 	ld	a, (de)
      000772 9E                    1691 	sbc	a, (hl)
      000773 DAr2Cr08              1692 	jp	C, 00140$
      000776 21r0Ar00              1693 	ld	hl, #(_player + 10)
      000779 2A                    1694 	ld	a, (hl+)
      00077A 4F                    1695 	ld	c, a
      00077B 46                    1696 	ld	b, (hl)
      00077C F8 0E                 1697 	ldhl	sp,	#14
      00077E 2A                    1698 	ld	a,	(hl+)
      00077F 66                    1699 	ld	h, (hl)
      000780 6F                    1700 	ld	l, a
      000781 09                    1701 	add	hl, bc
      000782 4D                    1702 	ld	c, l
      000783 44                    1703 	ld	b, h
      000784 F8 00                 1704 	ldhl	sp,	#0
      000786 79                    1705 	ld	a, c
      000787 96                    1706 	sub	a, (hl)
      000788 23                    1707 	inc	hl
      000789 78                    1708 	ld	a, b
      00078A 9E                    1709 	sbc	a, (hl)
      00078B DAr2Cr08              1710 	jp	C, 00140$
      00078E 21r07r00              1711 	ld	hl, #(_player + 7)
      000791 4E                    1712 	ld	c, (hl)
      000792 41                    1713 	ld	b, c
      000793 1E 00                 1714 	ld	e, #0x00
      000795 F8 02                 1715 	ldhl	sp,	#2
      000797 2A                    1716 	ld	a, (hl+)
      000798 90                    1717 	sub	a, b
      000799 7E                    1718 	ld	a, (hl)
      00079A 9B                    1719 	sbc	a, e
      00079B DAr2Cr08              1720 	jp	C, 00140$
      00079E 06 00                 1721 	ld	b, #0x00
      0007A0 21r08r00              1722 	ld	hl, #(_player + 8)
      0007A3 2A                    1723 	ld	a,	(hl+)
      0007A4 66                    1724 	ld	h, (hl)
                                   1725 ;	spillPairReg hl
      0007A5 6F                    1726 	ld	l, a
                                   1727 ;	spillPairReg hl
                                   1728 ;	spillPairReg hl
      0007A6 09                    1729 	add	hl, bc
      0007A7 4D                    1730 	ld	c, l
      0007A8 44                    1731 	ld	b, h
      0007A9 F8 02                 1732 	ldhl	sp,	#2
      0007AB 79                    1733 	ld	a, c
      0007AC 96                    1734 	sub	a, (hl)
      0007AD 23                    1735 	inc	hl
      0007AE 78                    1736 	ld	a, b
      0007AF 9E                    1737 	sbc	a, (hl)
      0007B0 38 7A                 1738 	jr	C, 00140$
      0007B2                       1739 00139$:
      0007B2 21r0Ar00              1740 	ld	hl, #(_player + 10)
      0007B5 2A                    1741 	ld	a, (hl+)
      0007B6 4F                    1742 	ld	c, a
      0007B7 46                    1743 	ld	b, (hl)
      0007B8 F8 0E                 1744 	ldhl	sp,	#14
      0007BA 2A                    1745 	ld	a,	(hl+)
      0007BB 66                    1746 	ld	h, (hl)
      0007BC 6F                    1747 	ld	l, a
      0007BD 09                    1748 	add	hl, bc
      0007BE 4D                    1749 	ld	c, l
      0007BF 44                    1750 	ld	b, h
      0007C0 21r00r00              1751 	ld	hl, #_xBall
      0007C3 2A                    1752 	ld	a, (hl+)
      0007C4 91                    1753 	sub	a, c
      0007C5 7E                    1754 	ld	a, (hl)
      0007C6 98                    1755 	sbc	a, b
      0007C7 38 0F                 1756 	jr	C, 00136$
      0007C9 F8 04                 1757 	ldhl	sp,	#4
      0007CB 7E                    1758 	ld	a, (hl)
      0007CC EAr00r00              1759 	ld	(#_xBall),a
      0007CF F8 05                 1760 	ldhl	sp,	#5
      0007D1 7E                    1761 	ld	a, (hl)
      0007D2 EAr01r00              1762 	ld	(#_xBall + 1),a
      0007D5 C3r7Ar09              1763 	jp	00174$
      0007D8                       1764 00136$:
      0007D8 F8 0C                 1765 	ldhl	sp,	#12
      0007DA 5D                    1766 	ld	e, l
      0007DB 54                    1767 	ld	d, h
      0007DC 21r00r00              1768 	ld	hl, #_xBall
      0007DF 1A                    1769 	ld	a, (de)
      0007E0 13                    1770 	inc	de
      0007E1 96                    1771 	sub	a, (hl)
      0007E2 23                    1772 	inc	hl
      0007E3 1A                    1773 	ld	a, (de)
      0007E4 9E                    1774 	sbc	a, (hl)
      0007E5 38 0F                 1775 	jr	C, 00134$
      0007E7 F8 06                 1776 	ldhl	sp,	#6
      0007E9 7E                    1777 	ld	a, (hl)
      0007EA EAr00r00              1778 	ld	(#_xBall),a
      0007ED F8 07                 1779 	ldhl	sp,	#7
      0007EF 7E                    1780 	ld	a, (hl)
      0007F0 EAr01r00              1781 	ld	(#_xBall + 1),a
      0007F3 C3r7Ar09              1782 	jp	00174$
      0007F6                       1783 00134$:
      0007F6 FAr07r00              1784 	ld	a, (#(_player + 7) + 0)
      0007F9 4F                    1785 	ld	c, a
      0007FA 06 00                 1786 	ld	b, #0x00
      0007FC 21r08r00              1787 	ld	hl, #(_player + 8)
      0007FF 2A                    1788 	ld	a,	(hl+)
      000800 66                    1789 	ld	h, (hl)
                                   1790 ;	spillPairReg hl
      000801 6F                    1791 	ld	l, a
                                   1792 ;	spillPairReg hl
                                   1793 ;	spillPairReg hl
      000802 09                    1794 	add	hl, bc
      000803 4D                    1795 	ld	c, l
      000804 44                    1796 	ld	b, h
      000805 21r02r00              1797 	ld	hl, #_yBall
      000808 2A                    1798 	ld	a, (hl+)
      000809 91                    1799 	sub	a, c
      00080A 7E                    1800 	ld	a, (hl)
      00080B 98                    1801 	sbc	a, b
      00080C 38 0F                 1802 	jr	C, 00132$
      00080E F8 08                 1803 	ldhl	sp,	#8
      000810 7E                    1804 	ld	a, (hl)
      000811 EAr02r00              1805 	ld	(#_yBall),a
      000814 F8 09                 1806 	ldhl	sp,	#9
      000816 7E                    1807 	ld	a, (hl)
      000817 EAr03r00              1808 	ld	(#_yBall + 1),a
      00081A C3r7Ar09              1809 	jp	00174$
      00081D                       1810 00132$:
      00081D F8 0A                 1811 	ldhl	sp,	#10
      00081F 7E                    1812 	ld	a, (hl)
      000820 EAr02r00              1813 	ld	(#_yBall),a
      000823 F8 0B                 1814 	ldhl	sp,	#11
      000825 7E                    1815 	ld	a, (hl)
      000826 EAr03r00              1816 	ld	(#_yBall + 1),a
      000829 C3r7Ar09              1817 	jp	00174$
      00082C                       1818 00140$:
      00082C FAr14r00              1819 	ld	a, (#(_AI + 6) + 0)
      00082F 4F                    1820 	ld	c, a
      000830 06 00                 1821 	ld	b, #0x00
      000832 FAr14r00              1822 	ld	a, (#(_AI + 6) + 0)
      000835 F8 0C                 1823 	ldhl	sp,	#12
      000837 22                    1824 	ld	(hl+), a
      000838 36 00                 1825 	ld	(hl), #0x00
      00083A 23                    1826 	inc	hl
      00083B 5F                    1827 	ld	e, a
      00083C 16 00                 1828 	ld	d, #0x00
      00083E 7B                    1829 	ld	a, e
      00083F 22                    1830 	ld	(hl+), a
      000840 72                    1831 	ld	(hl), d
      000841 21r00r00              1832 	ld	hl, #_xBall
      000844 79                    1833 	ld	a, c
      000845 96                    1834 	sub	a, (hl)
      000846 23                    1835 	inc	hl
      000847 78                    1836 	ld	a, b
      000848 9E                    1837 	sbc	a, (hl)
      000849 38 21                 1838 	jr	C, 00148$
      00084B F8 00                 1839 	ldhl	sp,	#0
      00084D 2A                    1840 	ld	a, (hl+)
      00084E 91                    1841 	sub	a, c
      00084F 7E                    1842 	ld	a, (hl)
      000850 98                    1843 	sbc	a, b
      000851 38 19                 1844 	jr	C, 00148$
      000853 FAr15r00              1845 	ld	a, (#(_AI + 7) + 0)
      000856 4F                    1846 	ld	c, a
      000857 06 00                 1847 	ld	b, #0x00
      000859 21r02r00              1848 	ld	hl, #_yBall
      00085C 79                    1849 	ld	a, c
      00085D 96                    1850 	sub	a, (hl)
      00085E 23                    1851 	inc	hl
      00085F 78                    1852 	ld	a, b
      000860 9E                    1853 	sbc	a, (hl)
      000861 38 09                 1854 	jr	C, 00148$
      000863 F8 02                 1855 	ldhl	sp,	#2
      000865 2A                    1856 	ld	a, (hl+)
      000866 91                    1857 	sub	a, c
      000867 7E                    1858 	ld	a, (hl)
      000868 98                    1859 	sbc	a, b
      000869 D2r01r09              1860 	jp	NC, 00163$
      00086C                       1861 00148$:
      00086C 11r00r00              1862 	ld	de, #_xBall
      00086F F8 0C                 1863 	ldhl	sp,	#12
      000871 1A                    1864 	ld	a, (de)
      000872 13                    1865 	inc	de
      000873 96                    1866 	sub	a, (hl)
      000874 23                    1867 	inc	hl
      000875 1A                    1868 	ld	a, (de)
      000876 9E                    1869 	sbc	a, (hl)
      000877 38 3D                 1870 	jr	C, 00152$
      000879 21r18r00              1871 	ld	hl, #(_AI + 10)
      00087C 2A                    1872 	ld	a, (hl+)
      00087D 4F                    1873 	ld	c, a
      00087E 46                    1874 	ld	b, (hl)
      00087F F8 0E                 1875 	ldhl	sp,	#14
      000881 2A                    1876 	ld	a,	(hl+)
      000882 66                    1877 	ld	h, (hl)
      000883 6F                    1878 	ld	l, a
      000884 09                    1879 	add	hl, bc
      000885 4D                    1880 	ld	c, l
      000886 44                    1881 	ld	b, h
      000887 21r00r00              1882 	ld	hl, #_xBall
      00088A 79                    1883 	ld	a, c
      00088B 96                    1884 	sub	a, (hl)
      00088C 23                    1885 	inc	hl
      00088D 78                    1886 	ld	a, b
      00088E 9E                    1887 	sbc	a, (hl)
      00088F 38 25                 1888 	jr	C, 00152$
      000891 21r15r00              1889 	ld	hl, #(_AI + 7)
      000894 4E                    1890 	ld	c, (hl)
      000895 41                    1891 	ld	b, c
      000896 1E 00                 1892 	ld	e, #0x00
      000898 21r02r00              1893 	ld	hl, #_yBall
      00089B 2A                    1894 	ld	a, (hl+)
      00089C 90                    1895 	sub	a, b
      00089D 7E                    1896 	ld	a, (hl)
      00089E 9B                    1897 	sbc	a, e
      00089F 38 15                 1898 	jr	C, 00152$
      0008A1 06 00                 1899 	ld	b, #0x00
      0008A3 21r16r00              1900 	ld	hl, #(_AI + 8)
      0008A6 2A                    1901 	ld	a,	(hl+)
      0008A7 66                    1902 	ld	h, (hl)
                                   1903 ;	spillPairReg hl
      0008A8 6F                    1904 	ld	l, a
                                   1905 ;	spillPairReg hl
                                   1906 ;	spillPairReg hl
      0008A9 09                    1907 	add	hl, bc
      0008AA 4D                    1908 	ld	c, l
      0008AB 44                    1909 	ld	b, h
      0008AC 21r02r00              1910 	ld	hl, #_yBall
      0008AF 79                    1911 	ld	a, c
      0008B0 96                    1912 	sub	a, (hl)
      0008B1 23                    1913 	inc	hl
      0008B2 78                    1914 	ld	a, b
      0008B3 9E                    1915 	sbc	a, (hl)
      0008B4 30 4B                 1916 	jr	NC, 00163$
      0008B6                       1917 00152$:
      0008B6 F8 00                 1918 	ldhl	sp,	#0
      0008B8 5D                    1919 	ld	e, l
      0008B9 54                    1920 	ld	d, h
      0008BA F8 0C                 1921 	ldhl	sp,	#12
      0008BC 1A                    1922 	ld	a, (de)
      0008BD 13                    1923 	inc	de
      0008BE 96                    1924 	sub	a, (hl)
      0008BF 23                    1925 	inc	hl
      0008C0 1A                    1926 	ld	a, (de)
      0008C1 9E                    1927 	sbc	a, (hl)
      0008C2 DAr77r09              1928 	jp	C, 00164$
      0008C5 21r18r00              1929 	ld	hl, #(_AI + 10)
      0008C8 2A                    1930 	ld	a, (hl+)
      0008C9 4F                    1931 	ld	c, a
      0008CA 46                    1932 	ld	b, (hl)
      0008CB F8 0E                 1933 	ldhl	sp,	#14
      0008CD 2A                    1934 	ld	a,	(hl+)
      0008CE 66                    1935 	ld	h, (hl)
      0008CF 6F                    1936 	ld	l, a
      0008D0 09                    1937 	add	hl, bc
      0008D1 4D                    1938 	ld	c, l
      0008D2 44                    1939 	ld	b, h
      0008D3 F8 00                 1940 	ldhl	sp,	#0
      0008D5 79                    1941 	ld	a, c
      0008D6 96                    1942 	sub	a, (hl)
      0008D7 23                    1943 	inc	hl
      0008D8 78                    1944 	ld	a, b
      0008D9 9E                    1945 	sbc	a, (hl)
      0008DA DAr77r09              1946 	jp	C, 00164$
      0008DD 21r15r00              1947 	ld	hl, #(_AI + 7)
      0008E0 4E                    1948 	ld	c, (hl)
      0008E1 41                    1949 	ld	b, c
      0008E2 1E 00                 1950 	ld	e, #0x00
      0008E4 F8 02                 1951 	ldhl	sp,	#2
      0008E6 2A                    1952 	ld	a, (hl+)
      0008E7 90                    1953 	sub	a, b
      0008E8 7E                    1954 	ld	a, (hl)
      0008E9 9B                    1955 	sbc	a, e
      0008EA DAr77r09              1956 	jp	C, 00164$
      0008ED 06 00                 1957 	ld	b, #0x00
      0008EF 21r16r00              1958 	ld	hl, #(_AI + 8)
      0008F2 2A                    1959 	ld	a,	(hl+)
      0008F3 66                    1960 	ld	h, (hl)
                                   1961 ;	spillPairReg hl
      0008F4 6F                    1962 	ld	l, a
                                   1963 ;	spillPairReg hl
                                   1964 ;	spillPairReg hl
      0008F5 09                    1965 	add	hl, bc
      0008F6 4D                    1966 	ld	c, l
      0008F7 44                    1967 	ld	b, h
      0008F8 F8 02                 1968 	ldhl	sp,	#2
      0008FA 79                    1969 	ld	a, c
      0008FB 96                    1970 	sub	a, (hl)
      0008FC 23                    1971 	inc	hl
      0008FD 78                    1972 	ld	a, b
      0008FE 9E                    1973 	sbc	a, (hl)
      0008FF 38 76                 1974 	jr	C, 00164$
      000901                       1975 00163$:
      000901 21r18r00              1976 	ld	hl, #(_AI + 10)
      000904 2A                    1977 	ld	a, (hl+)
      000905 4F                    1978 	ld	c, a
      000906 46                    1979 	ld	b, (hl)
      000907 F8 0E                 1980 	ldhl	sp,	#14
      000909 2A                    1981 	ld	a,	(hl+)
      00090A 66                    1982 	ld	h, (hl)
      00090B 6F                    1983 	ld	l, a
      00090C 09                    1984 	add	hl, bc
      00090D 4D                    1985 	ld	c, l
      00090E 44                    1986 	ld	b, h
      00090F 21r00r00              1987 	ld	hl, #_xBall
      000912 2A                    1988 	ld	a, (hl+)
      000913 91                    1989 	sub	a, c
      000914 7E                    1990 	ld	a, (hl)
      000915 98                    1991 	sbc	a, b
      000916 38 0E                 1992 	jr	C, 00160$
      000918 F8 04                 1993 	ldhl	sp,	#4
      00091A 7E                    1994 	ld	a, (hl)
      00091B EAr00r00              1995 	ld	(#_xBall),a
      00091E F8 05                 1996 	ldhl	sp,	#5
      000920 7E                    1997 	ld	a, (hl)
      000921 EAr01r00              1998 	ld	(#_xBall + 1),a
      000924 18 54                 1999 	jr	00174$
      000926                       2000 00160$:
      000926 F8 0C                 2001 	ldhl	sp,	#12
      000928 5D                    2002 	ld	e, l
      000929 54                    2003 	ld	d, h
      00092A 21r00r00              2004 	ld	hl, #_xBall
      00092D 1A                    2005 	ld	a, (de)
      00092E 13                    2006 	inc	de
      00092F 96                    2007 	sub	a, (hl)
      000930 23                    2008 	inc	hl
      000931 1A                    2009 	ld	a, (de)
      000932 9E                    2010 	sbc	a, (hl)
      000933 38 0E                 2011 	jr	C, 00158$
      000935 F8 06                 2012 	ldhl	sp,	#6
      000937 7E                    2013 	ld	a, (hl)
      000938 EAr00r00              2014 	ld	(#_xBall),a
      00093B F8 07                 2015 	ldhl	sp,	#7
      00093D 7E                    2016 	ld	a, (hl)
      00093E EAr01r00              2017 	ld	(#_xBall + 1),a
      000941 18 37                 2018 	jr	00174$
      000943                       2019 00158$:
      000943 FAr15r00              2020 	ld	a, (#(_AI + 7) + 0)
      000946 4F                    2021 	ld	c, a
      000947 06 00                 2022 	ld	b, #0x00
      000949 21r16r00              2023 	ld	hl, #(_AI + 8)
      00094C 2A                    2024 	ld	a,	(hl+)
      00094D 66                    2025 	ld	h, (hl)
                                   2026 ;	spillPairReg hl
      00094E 6F                    2027 	ld	l, a
                                   2028 ;	spillPairReg hl
                                   2029 ;	spillPairReg hl
      00094F 09                    2030 	add	hl, bc
      000950 4D                    2031 	ld	c, l
      000951 44                    2032 	ld	b, h
      000952 21r02r00              2033 	ld	hl, #_yBall
      000955 2A                    2034 	ld	a, (hl+)
      000956 91                    2035 	sub	a, c
      000957 7E                    2036 	ld	a, (hl)
      000958 98                    2037 	sbc	a, b
      000959 38 0E                 2038 	jr	C, 00156$
      00095B F8 08                 2039 	ldhl	sp,	#8
      00095D 7E                    2040 	ld	a, (hl)
      00095E EAr02r00              2041 	ld	(#_yBall),a
      000961 F8 09                 2042 	ldhl	sp,	#9
      000963 7E                    2043 	ld	a, (hl)
      000964 EAr03r00              2044 	ld	(#_yBall + 1),a
      000967 18 11                 2045 	jr	00174$
      000969                       2046 00156$:
      000969 F8 0A                 2047 	ldhl	sp,	#10
      00096B 7E                    2048 	ld	a, (hl)
      00096C EAr02r00              2049 	ld	(#_yBall),a
      00096F F8 0B                 2050 	ldhl	sp,	#11
      000971 7E                    2051 	ld	a, (hl)
      000972 EAr03r00              2052 	ld	(#_yBall + 1),a
      000975 18 03                 2053 	jr	00174$
      000977                       2054 00164$:
      000977 AF                    2055 	xor	a, a
      000978 18 02                 2056 	jr	00175$
      00097A                       2057 00174$:
      00097A 3E 01                 2058 	ld	a, #0x01
      00097C                       2059 00175$:
                                   2060 ;main.c:266: if(collisioned)
      00097C B7                    2061 	or	a, a
      00097D CAr02r0A              2062 	jp	Z, 00107$
                                   2063 ;main.c:268: speed_y = (rand() % 10 - 5) * -1;
      000980 CDr00r00              2064 	call	_rand
      000983 16 00                 2065 	ld	d, #0x00
      000985 01 0A 00              2066 	ld	bc, #0x000a
      000988 C5                    2067 	push	bc
      000989 D5                    2068 	push	de
      00098A CDr00r00              2069 	call	__modsint
      00098D E8 04                 2070 	add	sp, #4
      00098F 7B                    2071 	ld	a, e
      000990 C6 FB                 2072 	add	a, #0xfb
      000992 4F                    2073 	ld	c, a
      000993 AF                    2074 	xor	a, a
      000994 91                    2075 	sub	a, c
      000995 EAr1Cr00              2076 	ld	(#_speed_y),a
                                   2077 ;main.c:269: if((speed_x > -4 && speed_x < 0) || (speed_x < 4 && speed_x > 0))
      000998 21r1Dr00              2078 	ld	hl, #_speed_x
      00099B 5E                    2079 	ld	e, (hl)
      00099C AF                    2080 	xor	a, a
      00099D 57                    2081 	ld	d, a
      00099E 96                    2082 	sub	a, (hl)
      00099F CB 7B                 2083 	bit	7, e
      0009A1 28 07                 2084 	jr	Z, 00338$
      0009A3 CB 7A                 2085 	bit	7, d
      0009A5 20 08                 2086 	jr	NZ, 00339$
      0009A7 BF                    2087 	cp	a, a
      0009A8 18 05                 2088 	jr	00339$
      0009AA                       2089 00338$:
      0009AA CB 7A                 2090 	bit	7, d
      0009AC 28 01                 2091 	jr	Z, 00339$
      0009AE 37                    2092 	scf
      0009AF                       2093 00339$:
      0009AF 3E 00                 2094 	ld	a, #0x00
      0009B1 17                    2095 	rla
      0009B2 4F                    2096 	ld	c, a
      0009B3 21r1Dr00              2097 	ld	hl, #_speed_x
      0009B6 5E                    2098 	ld	e, (hl)
      0009B7 3E FC                 2099 	ld	a,#0xfc
      0009B9 57                    2100 	ld	d,a
      0009BA 96                    2101 	sub	a, (hl)
      0009BB CB 7B                 2102 	bit	7, e
      0009BD 28 07                 2103 	jr	Z, 00340$
      0009BF CB 7A                 2104 	bit	7, d
      0009C1 20 08                 2105 	jr	NZ, 00341$
      0009C3 BF                    2106 	cp	a, a
      0009C4 18 05                 2107 	jr	00341$
      0009C6                       2108 00340$:
      0009C6 CB 7A                 2109 	bit	7, d
      0009C8 28 01                 2110 	jr	Z, 00341$
      0009CA 37                    2111 	scf
      0009CB                       2112 00341$:
      0009CB 30 07                 2113 	jr	NC, 00105$
      0009CD FAr1Dr00              2114 	ld	a, (#_speed_x)
      0009D0 CB 7F                 2115 	bit	7, a
      0009D2 20 0D                 2116 	jr	NZ, 00101$
      0009D4                       2117 00105$:
      0009D4 FAr1Dr00              2118 	ld	a, (#_speed_x)
      0009D7 EE 80                 2119 	xor	a, #0x80
      0009D9 D6 84                 2120 	sub	a, #0x84
      0009DB 30 12                 2121 	jr	NC, 00102$
      0009DD 79                    2122 	ld	a, c
      0009DE B7                    2123 	or	a, a
      0009DF 28 0E                 2124 	jr	Z, 00102$
      0009E1                       2125 00101$:
                                   2126 ;main.c:271: speed_x > 0 ? ++speed_x : --speed_x;        //  Acceleration
      0009E1 79                    2127 	ld	a, c
      0009E2 B7                    2128 	or	a, a
      0009E3 28 06                 2129 	jr	Z, 00176$
      0009E5 21r1Dr00              2130 	ld	hl, #_speed_x
      0009E8 34                    2131 	inc	(hl)
      0009E9 18 04                 2132 	jr	00102$
      0009EB                       2133 00176$:
      0009EB 21r1Dr00              2134 	ld	hl, #_speed_x
      0009EE 35                    2135 	dec	(hl)
      0009EF                       2136 00102$:
                                   2137 ;main.c:274: speed_x *= -1;
      0009EF AF                    2138 	xor	a, a
      0009F0 21r1Dr00              2139 	ld	hl, #_speed_x
      0009F3 96                    2140 	sub	a, (hl)
      0009F4 77                    2141 	ld	(hl), a
                                   2142 ;main.c:276: canAImove = !canAImove;
      0009F5 21r04r00              2143 	ld	hl, #_canAImove
      0009F8 7E                    2144 	ld	a, (hl)
      0009F9 D6 01                 2145 	sub	a,#0x01
      0009FB 3E 00                 2146 	ld	a, #0x00
      0009FD 17                    2147 	rla
      0009FE 77                    2148 	ld	(hl), a
                                   2149 ;main.c:280: play_jumpy_sound();
      0009FF CDr34r03              2150 	call	_play_jumpy_sound
      000A02                       2151 00107$:
                                   2152 ;main.c:285: speed_y *= -1;
      000A02 AF                    2153 	xor	a, a
      000A03 21r1Cr00              2154 	ld	hl, #_speed_y
      000A06 96                    2155 	sub	a, (hl)
      000A07 4F                    2156 	ld	c, a
                                   2157 ;main.c:283: if(yBall <= 20)
      000A08 21r02r00              2158 	ld	hl, #_yBall
      000A0B 3E 14                 2159 	ld	a, #0x14
      000A0D 96                    2160 	sub	a, (hl)
      000A0E 23                    2161 	inc	hl
      000A0F 3E 00                 2162 	ld	a, #0x00
      000A11 9E                    2163 	sbc	a, (hl)
      000A12 38 06                 2164 	jr	C, 00111$
                                   2165 ;main.c:285: speed_y *= -1;
      000A14 21r1Cr00              2166 	ld	hl, #_speed_y
      000A17 71                    2167 	ld	(hl), c
      000A18 18 0F                 2168 	jr	00112$
      000A1A                       2169 00111$:
                                   2170 ;main.c:287: else if(yBall >= SCREENHEIGHT)
      000A1A 21r02r00              2171 	ld	hl, #_yBall
      000A1D 2A                    2172 	ld	a, (hl+)
      000A1E D6 90                 2173 	sub	a, #0x90
      000A20 7E                    2174 	ld	a, (hl)
      000A21 DE 00                 2175 	sbc	a, #0x00
      000A23 38 04                 2176 	jr	C, 00112$
                                   2177 ;main.c:289: speed_y *= -1;
      000A25 21r1Cr00              2178 	ld	hl, #_speed_y
      000A28 71                    2179 	ld	(hl), c
      000A29                       2180 00112$:
                                   2181 ;main.c:294: if((xBall >= player.x + player.width + 2))
      000A29 FAr06r00              2182 	ld	a, (#(_player + 6) + 0)
      000A2C 4F                    2183 	ld	c, a
      000A2D 06 00                 2184 	ld	b, #0x00
      000A2F 21r0Ar00              2185 	ld	hl, #_player + 10
      000A32 2A                    2186 	ld	a,	(hl+)
      000A33 66                    2187 	ld	h, (hl)
                                   2188 ;	spillPairReg hl
      000A34 6F                    2189 	ld	l, a
                                   2190 ;	spillPairReg hl
                                   2191 ;	spillPairReg hl
      000A35 09                    2192 	add	hl, bc
      000A36 23                    2193 	inc	hl
      000A37 23                    2194 	inc	hl
      000A38 4D                    2195 	ld	c, l
      000A39 44                    2196 	ld	b, h
      000A3A 21r00r00              2197 	ld	hl, #_xBall
      000A3D 2A                    2198 	ld	a, (hl+)
      000A3E 91                    2199 	sub	a, c
      000A3F 7E                    2200 	ld	a, (hl)
      000A40 98                    2201 	sbc	a, b
      000A41 38 28                 2202 	jr	C, 00116$
                                   2203 ;main.c:296: AI.score++;
      000A43 21r1Ar00              2204 	ld	hl, #(_AI + 12)
      000A46 2A                    2205 	ld	a, (hl+)
      000A47 4F                    2206 	ld	c, a
      000A48 46                    2207 	ld	b, (hl)
      000A49 03                    2208 	inc	bc
      000A4A 21r1Ar00              2209 	ld	hl, #(_AI + 12)
      000A4D 79                    2210 	ld	a, c
      000A4E 22                    2211 	ld	(hl+), a
      000A4F 70                    2212 	ld	(hl), b
                                   2213 ;main.c:297: update_score(AI.score, AI_TILE_LOCATION);
      000A50 3E 01                 2214 	ld	a, #0x01
      000A52 F5                    2215 	push	af
      000A53 33                    2216 	inc	sp
      000A54 C5                    2217 	push	bc
      000A55 CDrFDr03              2218 	call	_update_score
      000A58 E8 03                 2219 	add	sp, #3
                                   2220 ;main.c:239: timer = FRAMES_TO_WAIT;
      000A5A 21r05r00              2221 	ld	hl, #_timer
      000A5D 36 0A                 2222 	ld	(hl), #0x0a
                                   2223 ;main.c:240: ball_alive = 0;
      000A5F 21r1Fr00              2224 	ld	hl, #_ball_alive
      000A62 36 00                 2225 	ld	(hl), #0x00
                                   2226 ;c:/gbdk/include/gb/gb.h:1447: shadow_OAM[nb].tile=tile;
      000A64 21r1Ar00              2227 	ld	hl, #(_shadow_OAM + 26)
      000A67 36 FF                 2228 	ld	(hl), #0xff
                                   2229 ;main.c:299: kill_ball();
      000A69 18 38                 2230 	jr	00117$
      000A6B                       2231 00116$:
                                   2232 ;main.c:303: else if((xBall <= AI.x - 2))
      000A6B FAr14r00              2233 	ld	a, (#(_AI + 6) + 0)
      000A6E 06 00                 2234 	ld	b, #0x00
      000A70 4F                    2235 	ld	c, a
      000A71 0B                    2236 	dec	bc
      000A72 0B                    2237 	dec	bc
      000A73 21r00r00              2238 	ld	hl, #_xBall
      000A76 79                    2239 	ld	a, c
      000A77 96                    2240 	sub	a, (hl)
      000A78 23                    2241 	inc	hl
      000A79 78                    2242 	ld	a, b
      000A7A 9E                    2243 	sbc	a, (hl)
      000A7B 38 26                 2244 	jr	C, 00117$
                                   2245 ;main.c:305: player.score++;
      000A7D 21r0Cr00              2246 	ld	hl, #(_player + 12)
      000A80 2A                    2247 	ld	a, (hl+)
      000A81 4F                    2248 	ld	c, a
      000A82 46                    2249 	ld	b, (hl)
      000A83 03                    2250 	inc	bc
      000A84 21r0Cr00              2251 	ld	hl, #(_player + 12)
      000A87 79                    2252 	ld	a, c
      000A88 22                    2253 	ld	(hl+), a
      000A89 70                    2254 	ld	(hl), b
                                   2255 ;main.c:306: update_score(player.score, PLAYER_TILE_LOCATION);
      000A8A 3E 11                 2256 	ld	a, #0x11
      000A8C F5                    2257 	push	af
      000A8D 33                    2258 	inc	sp
      000A8E C5                    2259 	push	bc
      000A8F CDrFDr03              2260 	call	_update_score
      000A92 E8 03                 2261 	add	sp, #3
                                   2262 ;main.c:239: timer = FRAMES_TO_WAIT;
      000A94 21r05r00              2263 	ld	hl, #_timer
      000A97 36 0A                 2264 	ld	(hl), #0x0a
                                   2265 ;main.c:240: ball_alive = 0;
      000A99 21r1Fr00              2266 	ld	hl, #_ball_alive
      000A9C 36 00                 2267 	ld	(hl), #0x00
                                   2268 ;c:/gbdk/include/gb/gb.h:1447: shadow_OAM[nb].tile=tile;
      000A9E 21r1Ar00              2269 	ld	hl, #(_shadow_OAM + 26)
      000AA1 36 FF                 2270 	ld	(hl), #0xff
                                   2271 ;main.c:308: kill_ball();
      000AA3                       2272 00117$:
                                   2273 ;main.c:313: xBall += speed_x;
      000AA3 FAr1Dr00              2274 	ld	a, (#_speed_x)
      000AA6 4F                    2275 	ld	c, a
      000AA7 07                    2276 	rlca
      000AA8 9F                    2277 	sbc	a, a
      000AA9 47                    2278 	ld	b, a
      000AAA 21r00r00              2279 	ld	hl, #_xBall
      000AAD 7E                    2280 	ld	a, (hl)
      000AAE 81                    2281 	add	a, c
      000AAF 22                    2282 	ld	(hl+), a
      000AB0 7E                    2283 	ld	a, (hl)
      000AB1 88                    2284 	adc	a, b
      000AB2 77                    2285 	ld	(hl), a
                                   2286 ;main.c:314: yBall += speed_y;
      000AB3 FAr1Cr00              2287 	ld	a, (#_speed_y)
      000AB6 4F                    2288 	ld	c, a
      000AB7 07                    2289 	rlca
      000AB8 9F                    2290 	sbc	a, a
      000AB9 47                    2291 	ld	b, a
      000ABA 21r02r00              2292 	ld	hl, #_yBall
      000ABD 7E                    2293 	ld	a, (hl)
      000ABE 81                    2294 	add	a, c
      000ABF 22                    2295 	ld	(hl+), a
      000AC0 7E                    2296 	ld	a, (hl)
      000AC1 88                    2297 	adc	a, b
                                   2298 ;main.c:316: move_sprite(BALL_SPRITE, xBall, yBall);
      000AC2 32                    2299 	ld	(hl-), a
      000AC3 4E                    2300 	ld	c, (hl)
      000AC4 21r00r00              2301 	ld	hl, #_xBall
      000AC7 46                    2302 	ld	b, (hl)
                                   2303 ;c:/gbdk/include/gb/gb.h:1520: OAM_item_t * itm = &shadow_OAM[nb];
      000AC8 21r18r00              2304 	ld	hl, #(_shadow_OAM + 24)
                                   2305 ;c:/gbdk/include/gb/gb.h:1521: itm->y=y, itm->x=x;
      000ACB 79                    2306 	ld	a, c
      000ACC 22                    2307 	ld	(hl+), a
      000ACD 70                    2308 	ld	(hl), b
                                   2309 ;main.c:317: wait_vbl_done();
      000ACE CDr00r00              2310 	call	_wait_vbl_done
                                   2311 ;main.c:318: }
      000AD1 E8 10                 2312 	add	sp, #16
      000AD3 C9                    2313 	ret
                                   2314 ;main.c:321: void main()
                                   2315 ;	---------------------------------
                                   2316 ; Function main
                                   2317 ; ---------------------------------
      000AD4                       2318 _main::
                                   2319 ;main.c:324: init_min_font();
      000AD4 CDrC6r03              2320 	call	_init_min_font
                                   2321 ;main.c:325: sound_init();
      000AD7 CDr27r03              2322 	call	_sound_init
                                   2323 ;main.c:327: set_sprite_data(0, 4, character);
      000ADA 11r8Fr00              2324 	ld	de, #_character
      000ADD D5                    2325 	push	de
      000ADE 21 00 04              2326 	ld	hl, #0x400
      000AE1 E5                    2327 	push	hl
      000AE2 CDr00r00              2328 	call	_set_sprite_data
      000AE5 E8 04                 2329 	add	sp, #4
                                   2330 ;main.c:329: init_player();
      000AE7 CDrB2r04              2331 	call	_init_player
                                   2332 ;main.c:330: init_AI();
      000AEA CDr0Er05              2333 	call	_init_AI
                                   2334 ;main.c:331: init_ball();
      000AED CDr80r05              2335 	call	_init_ball
                                   2336 ;main.c:334: SHOW_SPRITES;
      000AF0 F0r00                 2337 	ldh	a, (_LCDC_REG + 0)
      000AF2 F6 02                 2338 	or	a, #0x02
      000AF4 E0r00                 2339 	ldh	(_LCDC_REG + 0), a
                                   2340 ;main.c:335: SHOW_WIN;
      000AF6 F0r00                 2341 	ldh	a, (_LCDC_REG + 0)
      000AF8 F6 20                 2342 	or	a, #0x20
      000AFA E0r00                 2343 	ldh	(_LCDC_REG + 0), a
                                   2344 ;main.c:336: DISPLAY_ON;
      000AFC F0r00                 2345 	ldh	a, (_LCDC_REG + 0)
      000AFE F6 80                 2346 	or	a, #0x80
      000B00 E0r00                 2347 	ldh	(_LCDC_REG + 0), a
                                   2348 ;main.c:338: waitpad(J_START);
      000B02 3E 80                 2349 	ld	a, #0x80
      000B04 F5                    2350 	push	af
      000B05 33                    2351 	inc	sp
      000B06 CDr00r00              2352 	call	_waitpad
      000B09 33                    2353 	inc	sp
                                   2354 ;utils/tools.c:228: uint16_t seed = LY_REG;
      000B0A F0r00                 2355 	ldh	a, (_LY_REG + 0)
      000B0C 4F                    2356 	ld	c, a
      000B0D 06 00                 2357 	ld	b, #0x00
                                   2358 ;utils/tools.c:229: seed |= (uint16_t)DIV_REG << 8;
      000B0F F0r00                 2359 	ldh	a, (_DIV_REG + 0)
      000B11 5F                    2360 	ld	e, a
      000B12 AF                    2361 	xor	a, a
      000B13 B1                    2362 	or	a, c
      000B14 4F                    2363 	ld	c, a
      000B15 7B                    2364 	ld	a, e
      000B16 B0                    2365 	or	a, b
      000B17 47                    2366 	ld	b, a
                                   2367 ;utils/tools.c:230: initrand(seed);
      000B18 C5                    2368 	push	bc
      000B19 CDr00r00              2369 	call	_initrand
      000B1C E1                    2370 	pop	hl
                                   2371 ;main.c:341: while(1)
      000B1D                       2372 00115$:
                                   2373 ;main.c:344: if(ball_alive)
      000B1D FAr1Fr00              2374 	ld	a, (#_ball_alive)
      000B20 B7                    2375 	or	a, a
      000B21 28 05                 2376 	jr	Z, 00109$
                                   2377 ;main.c:346: ball_movement();
      000B23 CDr70r06              2378 	call	_ball_movement
      000B26 18 61                 2379 	jr	00110$
      000B28                       2380 00109$:
                                   2381 ;main.c:348: else if(!ball_alive && !timer)
      000B28 FAr1Fr00              2382 	ld	a, (#_ball_alive)
      000B2B B7                    2383 	or	a, a
      000B2C 20 4D                 2384 	jr	NZ, 00105$
      000B2E FAr05r00              2385 	ld	a, (#_timer)
      000B31 B7                    2386 	or	a, a
      000B32 20 47                 2387 	jr	NZ, 00105$
                                   2388 ;main.c:249: xBall = MIDX;
      000B34 21r00r00              2389 	ld	hl, #_xBall
      000B37 3E 50                 2390 	ld	a, #0x50
      000B39 22                    2391 	ld	(hl+), a
      000B3A AF                    2392 	xor	a, a
      000B3B 77                    2393 	ld	(hl), a
                                   2394 ;main.c:250: yBall = MIDY + SPRITE_HEIGHT;
      000B3C 21r02r00              2395 	ld	hl, #_yBall
      000B3F 3E 50                 2396 	ld	a, #0x50
      000B41 22                    2397 	ld	(hl+), a
      000B42 AF                    2398 	xor	a, a
      000B43 77                    2399 	ld	(hl), a
                                   2400 ;main.c:252: speed_y = (rand() % 10 - 5);
      000B44 CDr00r00              2401 	call	_rand
      000B47 16 00                 2402 	ld	d, #0x00
      000B49 01 0A 00              2403 	ld	bc, #0x000a
      000B4C C5                    2404 	push	bc
      000B4D D5                    2405 	push	de
      000B4E CDr00r00              2406 	call	__modsint
      000B51 E8 04                 2407 	add	sp, #4
      000B53 7B                    2408 	ld	a, e
      000B54 C6 FB                 2409 	add	a, #0xfb
      000B56 EAr1Cr00              2410 	ld	(#_speed_y),a
                                   2411 ;main.c:253: speed_x = 1;
      000B59 21r1Dr00              2412 	ld	hl, #_speed_x
      000B5C 36 01                 2413 	ld	(hl), #0x01
                                   2414 ;main.c:255: set_sprite_tile(BALL_SPRITE, ball);
      000B5E 21rC5r03              2415 	ld	hl, #_ball
      000B61 4E                    2416 	ld	c, (hl)
                                   2417 ;c:/gbdk/include/gb/gb.h:1447: shadow_OAM[nb].tile=tile;
      000B62 21r1Ar00              2418 	ld	hl, #(_shadow_OAM + 26)
      000B65 71                    2419 	ld	(hl), c
                                   2420 ;main.c:257: move_sprite(BALL_SPRITE, xBall, yBall);
      000B66 21r02r00              2421 	ld	hl, #_yBall
      000B69 46                    2422 	ld	b, (hl)
      000B6A 21r00r00              2423 	ld	hl, #_xBall
      000B6D 4E                    2424 	ld	c, (hl)
                                   2425 ;c:/gbdk/include/gb/gb.h:1520: OAM_item_t * itm = &shadow_OAM[nb];
      000B6E 21r18r00              2426 	ld	hl, #(_shadow_OAM + 24)
                                   2427 ;c:/gbdk/include/gb/gb.h:1521: itm->y=y, itm->x=x;
      000B71 78                    2428 	ld	a, b
      000B72 22                    2429 	ld	(hl+), a
      000B73 71                    2430 	ld	(hl), c
                                   2431 ;main.c:351: ball_alive = 1;
      000B74 21r1Fr00              2432 	ld	hl, #_ball_alive
      000B77 36 01                 2433 	ld	(hl), #0x01
      000B79 18 0E                 2434 	jr	00110$
      000B7B                       2435 00105$:
                                   2436 ;main.c:353: else if(!ball_alive && timer)
      000B7B FAr1Fr00              2437 	ld	a, (#_ball_alive)
      000B7E B7                    2438 	or	a, a
      000B7F 20 08                 2439 	jr	NZ, 00110$
      000B81 21r05r00              2440 	ld	hl, #_timer
      000B84 7E                    2441 	ld	a, (hl)
      000B85 B7                    2442 	or	a, a
      000B86 28 01                 2443 	jr	Z, 00110$
                                   2444 ;main.c:355: --timer;
      000B88 35                    2445 	dec	(hl)
      000B89                       2446 00110$:
                                   2447 ;main.c:358: movement();
      000B89 CDrB6r05              2448 	call	_movement
                                   2449 ;main.c:360: if(ball_alive && canAImove)
      000B8C FAr1Fr00              2450 	ld	a, (#_ball_alive)
      000B8F B7                    2451 	or	a, a
      000B90 28 0E                 2452 	jr	Z, 00137$
      000B92 FAr04r00              2453 	ld	a, (#_canAImove)
      000B95 B7                    2454 	or	a, a
      000B96 28 08                 2455 	jr	Z, 00137$
                                   2456 ;main.c:362: ai_movement(2, 4);
      000B98 21 02 04              2457 	ld	hl, #0x402
      000B9B E5                    2458 	push	hl
      000B9C CDrFBr05              2459 	call	_ai_movement
      000B9F E1                    2460 	pop	hl
                                   2461 ;main.c:47: }
      000BA0                       2462 00137$:
      000BA0 01 00 00              2463 	ld	bc, #0x0000
      000BA3                       2464 00124$:
      000BA3 79                    2465 	ld	a, c
      000BA4 D6 01                 2466 	sub	a, #0x01
      000BA6 78                    2467 	ld	a, b
      000BA7 DE 00                 2468 	sbc	a, #0x00
      000BA9 D2r1Dr0B              2469 	jp	NC, 00115$
                                   2470 ;utils/tools.c:48: wait_vbl_done();
      000BAC CDr00r00              2471 	call	_wait_vbl_done
                                   2472 ;utils/tools.c:47: for(i = 0; i < loops; i++){
      000BAF 03                    2473 	inc	bc
                                   2474 ;main.c:373: performanceDelay(1);        //  More fluid but you gotta modify the speeds
                                   2475 ;main.c:378: }
      000BB0 18 F1                 2476 	jr	00124$
                                   2477 	.area _CODE
                                   2478 	.area _INITIALIZER
      000000                       2479 __xinit__xBall:
      000000 50 00                 2480 	.dw #0x0050
      000002                       2481 __xinit__yBall:
      000002 48 00                 2482 	.dw #0x0048
      000004                       2483 __xinit__canAImove:
      000004 00                    2484 	.db #0x00	; 0
      000005                       2485 __xinit__timer:
      000005 00                    2486 	.db #0x00	; 0
                                   2487 	.area _CABS (ABS)
